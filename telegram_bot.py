import os, logging, datetime as dt, calendar, json
from collections import defaultdict
from dotenv import load_dotenv
from telegram.constants import ParseMode
from telegram.error import BadRequest
from telegram.error import TelegramError
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, Update, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler,ConversationHandler, ContextTypes, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import matplotlib.pyplot as plt
import io
import math
import numpy as np
from matplotlib.ticker import MaxNLocator

# --- –ö–û–ù–§–ò–ì ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DATE_FMT = "%d.%m.%Y"
ADMINS = {"5144039813", "476179186"}  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SELLERS = ["–°–µ—Ä–≥–µ–π", "–ù–∞—Ç–∞–ª–∏—è", "–õ—é–¥–º–∏–ª–∞", "–ú–∞—Ä–∏—è"]
ADMIN_CHAT_IDS = [5144039813, 476179186]
SHEET_REPORT = "–î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã"
SHEET_SUPPLIERS = "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
SHEET_EXPENSES = "–†–∞—Å—Ö–æ–¥—ã"
SHEET_LOG = "–õ–æ–≥–∏"
SHEET_SHIFTS = "–°–º–µ–Ω—ã"
SHEET_DEBTS = "–î–æ–ª–≥–∏"
SHEET_SALARIES = "–ó–∞—Ä–ø–ª–∞—Ç—ã"
SHEET_PLAN_FACT = "–ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞" 
SHEET_PLANNING_SCHEDULE = "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"
SHEET_INVENTORY = "–û—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞"


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[logging.StreamHandler()]
)
def push_nav(context, target):
    stack = context.user_data.get('nav_stack', [])
    stack.append(target)
    context.user_data['nav_stack'] = stack

def pop_nav(context):
    stack = context.user_data.get('nav_stack', [])
    if stack:
        stack.pop()
    context.user_data['nav_stack'] = stack
    return stack[-1] if stack else "main_menu"

def now(): return dt.datetime.now().strftime("%d.%m.%Y %H:%M")
def sdate(d=None): 
    d = d or dt.date.today()
    return d.strftime(DATE_FMT)

def pdate(s):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–µ –≤—ã–∑—ã–≤–∞—è –æ—à–∏–±–æ–∫ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö."""
    if not isinstance(s, str):
        return None
    try:
        return dt.datetime.strptime(s, DATE_FMT).date()
    except ValueError:
        return None # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–ª
    
def week_range(date=None):
    date = date or dt.date.today()
    start = date - dt.timedelta(days=date.weekday())
    end = start + dt.timedelta(days=6)
    return start, end
    
def delete_plan_by_row_index(row_index: int) -> bool:
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –ª–∏—Å—Ç–µ –ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞ –ø–æ –µ–µ –Ω–æ–º–µ—Ä—É."""
    try:
        ws = GSHEET.worksheet(SHEET_PLAN_FACT)
        ws.delete_rows(row_index)
        logging.info(f"–ó–∞–ø–∏—Å—å –æ –ø–ª–∞–Ω–µ –≤ —Å—Ç—Ä–æ–∫–µ {row_index} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞–Ω–µ –≤ —Å—Ç—Ä–æ–∫–µ {row_index}: {e}")
        return False

def month_range(date=None):
    date = date or dt.date.today()
    start = dt.date(date.year, date.month, 1)
    end = dt.date(date.year, date.month + 1, 1) - dt.timedelta(days=1)
    return start, end

def parse_float(value):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—è—Ç–æ–π –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —á–∏—Å–ª–µ –≤ float."""
    if isinstance(value, (int, float)):
        return float(value)
    try:
        return float(value.replace(',', '.').strip())
    except (ValueError, TypeError):
        return 0.0

# --- –ò –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¢–û–ñ–ï –ó–ê–ú–ï–ù–ò–¢–ï ---
def get_planning_details_for_date(context: ContextTypes.DEFAULT_TYPE, report_date: dt.date):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ü–ª–∞–Ω–§–∞–∫—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–∞ –ó–ê–î–ê–ù–ù–£–Æ –î–ê–¢–£, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à."""
    report_date_str = sdate(report_date)
    
    rows = get_cached_sheet_data(context, SHEET_PLAN_FACT)
    if rows is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞")
        return "", 0, 0, 0

    details, total_cash, total_card = [], 0, 0
    for i, row in enumerate(rows):
        if not (row and len(row) > 3 and row[0]):
            continue

        if row[0].strip() == report_date_str:
            try:
                supplier = row[1]
                amount_str = row[2]
                pay_type = row[3]
                amount = float(amount_str.strip().replace(',', '.'))
                
                details.append(f"- {supplier}: {amount:.2f}‚Ç¥ ({pay_type})")
                if '–Ω–∞–ª–∏—á' in pay_type.lower():
                    total_cash += amount
                elif '–∫–∞—Ä—Ç' in pay_type.lower():
                    total_card += amount
            except (ValueError, IndexError) as e:
                logging.error(f"!!! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É #{i+2} –≤ –ª–∏—Å—Ç–µ '{SHEET_PLAN_FACT}': {row}. –û—à–∏–±–∫–∞: {e}")
                continue
    
    if not details:
        return "", 0, 0, 0

    report_text = "\n\n<b>üìã –ü–ª–∞–Ω –æ–ø–ª–∞—Ç –Ω–∞ " + report_date_str + ":</b>\n" + "\n".join(details)
    total_amount = total_cash + total_card
    return report_text, total_cash, total_card, total_amount
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
def get_debts_for_date(context: ContextTypes.DEFAULT_TYPE, report_date: dt.date):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–ª–≥–∞—Ö –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à."""
    rows = get_cached_sheet_data(context, SHEET_DEBTS)
    if rows is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –î–æ–ª–≥–∏ –¥–ª—è get_debts_for_date")
        return 0, []

    report_date_str = sdate(report_date)
    total = 0
    suppliers = []
    for row in rows:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ª–≥ –Ω–µ –ø–æ–≥–∞—à–µ–Ω (—Å—Ç–æ–ª–±–µ—Ü G, –∏–Ω–¥–µ–∫—Å 6) –∏ —Å—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if len(row) > 6 and row[6].strip().lower() != "–¥–∞" and row[5].strip() == report_date_str:
            try:
                amount = parse_float(row[4])  # –û—Å—Ç–∞—Ç–æ–∫
                total += amount
                suppliers.append((row[1], amount))
            except (ValueError, IndexError):
                continue
    return total, suppliers
def clear_plan_for_date(date_to_clear_str: str):
    """–û—á–∏—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç–µ –ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã."""
    try:
        ws = GSHEET.worksheet(SHEET_PLAN_FACT)
        all_rows = ws.get_all_values()
        
        rows_to_delete_indices = []
        for i, row in enumerate(all_rows[1:], start=2):
            if row and row[0] == date_to_clear_str:
                rows_to_delete_indices.append(i)
        
        if rows_to_delete_indices:
            for index in sorted(rows_to_delete_indices, reverse=True):
                ws.delete_rows(index)
            logging.info(f"–û—á–∏—â–µ–Ω—ã –ø–ª–∞–Ω—ã –¥–ª—è –¥–∞—Ç—ã: {date_to_clear_str}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞–Ω–æ–≤ –¥–ª—è –¥–∞—Ç—ã {date_to_clear_str}: {e}")


def get_cached_sheet_data(context: ContextTypes.DEFAULT_TYPE, sheet_name: str, cache_duration_seconds: int = 60, force_update: bool = False) -> list | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if not GSHEET: return None
    
    now = dt.datetime.now()
    cache = context.bot_data.setdefault('sheets_cache', {})
    
    # –ï—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if not force_update and sheet_name in cache:
        cached_data, timestamp = cache[sheet_name]
        if (now - timestamp).total_seconds() < cache_duration_seconds:
            logging.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è '{sheet_name}' –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞.")
            return list(cached_data)
            
    # –ß–∏—Ç–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    try:
        logging.info(f"–ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{sheet_name}' –∏–∑ Google Sheets (–æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à).")
        ws = GSHEET.worksheet(sheet_name)
        data = ws.get_all_values()[1:]
        
        cache[sheet_name] = (data, now)
        context.bot_data['sheets_cache'] = cache
        
        return list(data)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Å—Ç '{sheet_name}': {e}")
        return None
    
# --- GOOGLE SHEETS ---
def get_gsheet():
    try:
        scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ Railway (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        if 'GOOGLE_CREDENTIALS_JSON' in os.environ:
            # –ß–∏—Ç–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            creds_json_str = os.environ.get('GOOGLE_CREDENTIALS_JSON')
            creds_dict = json.loads(creds_json_str)
            creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        else:
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ)
            creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)

        gc = gspread.authorize(creds)
        sh = gc.open("–ú–∞–≥–∞–∑–∏–Ω: –§–∏–Ω–∞–Ω—Å—ã")
        logging.info("–¢–∞–±–ª–∏—Ü–∞ Google Sheets —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞")
        
        required_sheets = {
            SHEET_REPORT: ['–î–∞—Ç–∞', '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–ù–∞–ª–∏—á–Ω—ã–µ', '–¢–µ—Ä–º–∏–Ω–∞–ª', '–û–±—â–∞—è —Å—É–º–º–∞', '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞–ª–∏—á–Ω—ã—Ö', '–ù–∞ –∑–∞–≤—Ç—Ä–∞ (–¥–æ–ª–≥–∏)', '–ù–∞ –∑–∞–≤—Ç—Ä–∞ (–ø–ª–∞–Ω)', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–û—Å—Ç–∞—Ç–æ–∫ –≤ —Å–µ–π—Ñ–µ'],
            SHEET_SALARIES: ['–î–∞—Ç–∞', '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–¢–∏–ø', '–°—É–º–º–∞', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'],
            SHEET_SUPPLIERS: ['–î–∞—Ç–∞', '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–°—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–∞', '–í–æ–∑–≤—Ä–∞—Ç/—Å–ø–∏—Å–∞–Ω–∏–µ', '–ö –æ–ø–ª–∞—Ç–µ', '–°—É–º–º–∞ –ø–æ—Å–ª–µ –Ω–∞—Ü–µ–Ω–∫–∏', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '–û–ø–ª–∞—á–µ–Ω–æ', '–î–æ–ª–≥', '–°—Ä–æ–∫ –¥–æ–ª–≥–∞'],
            SHEET_EXPENSES: ['–î–∞—Ç–∞', '–°—É–º–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–ü—Ä–æ–¥–∞–≤–µ—Ü'],
            SHEET_LOG: ['–í—Ä–µ–º—è', 'Telegram', '–ò–º—è', '–î–µ–π—Å—Ç–≤–∏–µ', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'],
            SHEET_SHIFTS: ['–î–∞—Ç–∞', '–ü—Ä–æ–¥–∞–≤–µ—Ü 1', '–ü—Ä–æ–¥–∞–≤–µ—Ü 2'],
            SHEET_DEBTS: ['–î–∞—Ç–∞', '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–°—É–º–º–∞', '–û–ø–ª–∞—á–µ–Ω–æ', '–û—Å—Ç–∞—Ç–æ–∫', '–°—Ä–æ–∫ –ø–æ–≥–∞—à–µ–Ω–∏—è', '–ü–æ–≥–∞—à–µ–Ω–æ', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã'],
            SHEET_PLANNING_SCHEDULE: ["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–ü–æ—Å—Ç–∞–≤—â–∏–∫"],
            SHEET_PLAN_FACT: ["–î–∞—Ç–∞", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–°—É–º–º–∞", "–¢–∏–ø –æ–ø–ª–∞—Ç—ã", "–ö—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª", "–°—Ç–∞—Ç—É—Å"],
            "–ü–µ—Ä–µ—É—á–µ—Ç—ã": ["–î–∞—Ç–∞", "–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—É–º–º–∞", "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—É–º–º–∞", "–†–∞–∑–Ω–∏—Ü–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö—Ç–æ –≤–Ω—ë—Å"],
        }
        
        existing_titles = [ws.title for ws in sh.worksheets()]
        for sheet_name, headers in required_sheets.items():
            if sheet_name not in existing_titles:
                try:
                    ws = sh.add_worksheet(title=sheet_name, rows=1000, cols=len(headers))
                    ws.append_row(headers)
                    logging.info(f"–°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç: {sheet_name}")
                except gspread.exceptions.APIError as e:
                    if "already exists" in str(e):
                        logging.warning(f"–õ–∏—Å—Ç '{sheet_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    else: raise e
        return sh
        
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º: {e}")
        return None
    
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º: {e}")
        class DummyWorksheet:
            def append_row(self, row): 
                logging.warning(f"–ó–∞–≥–ª—É—à–∫–∞: append_row({row})")
            def get_all_values(self): 
                logging.warning("–ó–∞–≥–ª—É—à–∫–∞: get_all_values()")
                return []
            def update(self, *args, **kwargs): 
                logging.warning(f"–ó–∞–≥–ª—É—à–∫–∞: update({args}, {kwargs})")
            def find(self, *args, **kwargs):
                return None
            def update_cell(self, *args, **kwargs):
                pass
            def row_values(self, row):
                return []
            def col_values(self, col):
                return []
        class DummySpreadsheet:
            def worksheet(self, title):
                logging.warning(f"–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–ø—Ä–æ—à–µ–Ω –ª–∏—Å—Ç '{title}'")
                return DummyWorksheet()
        return DummySpreadsheet()

GSHEET = get_gsheet()

def log_action(user, name, action, comment=""):
    try:
        ws = GSHEET.worksheet(SHEET_LOG)
        ws.append_row([now(), str(user.id), name, action, comment])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def get_suppliers_for_day(day_of_week: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '–¥–ª–∏–Ω–Ω–æ–≥–æ' —Ñ–æ—Ä–º–∞—Ç–∞."""
    try:
        ws = GSHEET.worksheet("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        rows = ws.get_all_values()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        suppliers_for_day = []
        
        
        for row in rows:
            # <<< –ò –≠–¢–û –¢–û–ñ–ï –î–û–ë–ê–í–¨ >>>

            # row[0] - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, row[1] - –ü–æ—Å—Ç–∞–≤—â–∏–∫
            if row and row[0].strip().lower() == day_of_week:
                if len(row) > 1 and row[1].strip():
                    suppliers_for_day.append(row[1].strip())
                    
        print(f"--- –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏: {suppliers_for_day} ---")
        return suppliers_for_day
        
    except gspread.exceptions.WorksheetNotFound:
        logging.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ª–∏—Å—Ç '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å '{day_of_week}': {e}")
        return []

def save_fact(date, supplier, amount, pay_type, sheet):
    ws = sheet.worksheet("–ü–ª–∞–Ω–§–∞–∫—Ç")
    ws.append_row([date, supplier, amount, pay_type])
    
def get_unplanned_suppliers(date, all_suppliers, sheet):
    ws = sheet.worksheet("–ü–ª–∞–Ω–§–∞–∫—Ç")
    rows = ws.get_all_values()
    planned = [row[1] for row in rows if row[0] == date]
    return [x for x in all_suppliers if x not in planned]

def month_buttons(start_date, end_date):
    # prev/next month —Å —É—á—ë—Ç–æ–º —Å–º–µ–Ω—ã –≥–æ–¥–∞
    prev_month = start_date.month - 1 or 12
    prev_year = start_date.year if start_date.month > 1 else start_date.year - 1
    next_month = start_date.month + 1 if start_date.month < 12 else 1
    next_year = start_date.year if start_date.month < 12 else start_date.year + 1

    prev_start = dt.date(prev_year, prev_month, 1)
    prev_end = dt.date(prev_year, prev_month, calendar.monthrange(prev_year, prev_month)[1])
    next_start = dt.date(next_year, next_month, 1)
    next_end = dt.date(next_year, next_month, calendar.monthrange(next_year, next_month)[1])
    curr_start, curr_end = month_range()  # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

    return [
        [
            InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥. –º–µ—Å—è—Ü", callback_data=f"report_month_{sdate(prev_start)}_{sdate(prev_end)}"),
            InlineKeyboardButton("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data=f"report_month_{sdate(curr_start)}_{sdate(curr_end)}"),
            InlineKeyboardButton("–°–ª–µ–¥. –º–µ—Å—è—Ü ‚ñ∂Ô∏è", callback_data=f"report_month_{sdate(next_start)}_{sdate(next_end)}"),
        ],
        [InlineKeyboardButton("üí∏ –î–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—Å—Ö–æ–¥—ã", callback_data=f"details_exp_{sdate(start_date)}_{sdate(end_date)}")],
        [InlineKeyboardButton("üì¶ –î–µ—Ç–∞–ª—å–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ", callback_data=f"details_sup_{sdate(start_date)}_{sdate(end_date)}")],
        [InlineKeyboardButton("üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤", callback_data=f"detail_report_nav_{sdate(start_date)}_{sdate(end_date)}_0")],
        [InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data="view_reports_menu")]
    ]

# <<< –ù–ê–ß–ê–õ–û: –ù–û–í–´–ô –ö–û–î –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø >>>

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
def get_planned_suppliers(date_str: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É, 
    –≤–º–µ—Å—Ç–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–ª–∞–Ω–∞ –∏ –Ω–æ–º–µ—Ä–∞–º–∏ –∏—Ö —Å—Ç—Ä–æ–∫.
    """
    try:
        ws = GSHEET.worksheet(SHEET_PLAN_FACT)
        rows = ws.get_all_values()[1:]
        planned_suppliers_data = []
        for i, row in enumerate(rows, start=2):
            if row and len(row) >= 4 and row[0] == date_str:
                planned_suppliers_data.append({
                    "supplier": row[1].strip(),
                    "amount": row[2],
                    "pay_type": row[3],
                    "row_index": i
                })
        return planned_suppliers_data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ '{date_str}': {e}")
        return []
        
def save_plan_fact(date_str, supplier, amount, pay_type, user_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ –ø–ª–∞–Ω–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç—Å—è'."""
    if not GSHEET: return
    try:
        ws = GSHEET.worksheet(SHEET_PLAN_FACT)
        ws.append_row([date_str, supplier, amount, pay_type, user_name, "–û–∂–∏–¥–∞–µ—Ç—Å—è"])
        logging.info(f"–ü–ª–∞–Ω –Ω–∞ {date_str} –¥–ª—è '{supplier}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ü–ª–∞–Ω–§–∞–∫—Ç: {e}")
        
def get_tomorrow_planning_details():
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ü–ª–∞–Ω–§–∞–∫—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É."""
    tomorrow_str = (dt.date.today() + dt.timedelta(days=1)).strftime(DATE_FMT)
    try:
        ws = GSHEET.worksheet("–ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞")
        rows = ws.get_all_values()[1:]
        
        details = []
        total_cash = 0
        total_card = 0
        
        for row in rows:
            if row and row[0] == tomorrow_str:
                # row -> ['16.06.2025', 'Factor', '1500', '–ù–∞–ª–∏—á–Ω—ã–µ', '–ñ–µ–Ω—è']
                supplier = row[1]
                amount = float(row[2].replace(',', '.'))
                pay_type = row[3]
                
                details.append(f"- {supplier}: {amount:.2f}‚Ç¥ ({pay_type})")
                
                if pay_type.lower() == '–Ω–∞–ª–∏—á–Ω—ã–µ':
                    total_cash += amount
                elif pay_type.lower() == '–∫–∞—Ä—Ç–∞':
                    total_card += amount
        
        if not details:
            return "", 0, 0 # –ï—Å–ª–∏ –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç

        report_text = "\n\n<b>üìã –ü–ª–∞–Ω –æ–ø–ª–∞—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n" + "\n".join(details)
        
        return report_text, total_cash, total_card

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")
        return "", 0, 0

def clear_planning_sheet():
    """–û—á–∏—â–∞–µ—Ç –ª–∏—Å—Ç –ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞."""
    try:
        ws = GSHEET.worksheet("–ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞")
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π (–∑–∞–≥–æ–ª–æ–≤–∫–∞)
        ws.delete_rows(2, len(ws.get_all_values()))
        logging.info("–õ–∏—Å—Ç '–ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞' –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–∏—Å—Ç–∞ –ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞: {e}")

# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
def update_invoice_in_sheet(row_index: int, field_to_update: str, new_value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω–æ –ø–æ–ª–µ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤ –ª–∏—Å—Ç–µ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏."""
    try:
        ws = GSHEET.worksheet(SHEET_SUPPLIERS)
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è ---
        column_map = {
            'amount_income': 3, 'writeoff': 4, 'to_pay': 5, 'markup_amount': 6,
            'pay_type': 7, 'paid_status': 8, 'debt_amount': 9, 'due_date': 10, 
            'comment': 11
        }
        col_to_update = column_map.get(field_to_update)
        if not col_to_update:
            logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π: {field_to_update}")
            return False
        
        ws.update_cell(row_index, col_to_update, str(new_value))
        logging.info(f"–ù–∞–∫–ª–∞–¥–Ω–∞—è –≤ —Å—Ç—Ä–æ–∫–µ {row_index} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ª–µ: {field_to_update}, –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π ({row_index}, {col_to_update}): {e}")
        return False


def week_buttons(start_date, end_date):
    prev_start = start_date - dt.timedelta(days=7)
    prev_end = end_date - dt.timedelta(days=7)
    next_start = start_date + dt.timedelta(days=7)
    next_end = end_date + dt.timedelta(days=7)
    curr_start, curr_end = week_range()

    return [
        [
            InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f"report_week_{sdate(prev_start)}_{sdate(prev_end)}"),
            InlineKeyboardButton("–¢–µ–∫—É—â–∞—è", callback_data=f"report_week_current"),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚ñ∂Ô∏è", callback_data=f"report_week_{sdate(next_start)}_{sdate(next_end)}"),
        ],
        # --- –í–û–ó–í–†–ê–©–ê–ï–ú –ö–ù–û–ü–ö–£ –°–Æ–î–ê ---
        [InlineKeyboardButton("üìñ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º", callback_data=f"detail_report_nav_{sdate(start_date)}_{sdate(end_date)}_0")],
        [
            InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥—ã", callback_data=f"choose_date_exp_{sdate(start_date)}_{sdate(end_date)}"),
            InlineKeyboardButton("üì¶ –ù–∞–∫–ª–∞–¥–Ω—ã–µ", callback_data=f"choose_date_sup_{sdate(start_date)}_{sdate(end_date)}")
        ],
        [InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data="view_reports_menu")]
    ]

# --- –ò –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¢–û–ñ–ï –ó–ê–ú–ï–ù–ò–¢–ï ---
def month_buttons(start_date, end_date):
    prev_month_date = start_date - dt.timedelta(days=1)
    prev_start, _ = month_range(prev_month_date)
    next_month_date = end_date + dt.timedelta(days=1)
    next_start, _ = month_range(next_month_date)
    curr_start, _ = month_range()

    return [
        [
            InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥. –º–µ—Å—è—Ü", callback_data=f"report_month_{sdate(prev_start)}_{sdate(month_range(prev_start)[1])}"),
            InlineKeyboardButton("–¢–µ–∫—É—â–∏–π", callback_data=f"report_month_{sdate(curr_start)}_{sdate(month_range()[1])}"),
            InlineKeyboardButton("–°–ª–µ–¥. –º–µ—Å—è—Ü ‚ñ∂Ô∏è", callback_data=f"report_month_{sdate(next_start)}_{sdate(month_range(next_start)[1])}"),
        ],
        # --- –ò –°–Æ–î–ê –¢–û–ñ–ï ---
        [InlineKeyboardButton("üìñ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º", callback_data=f"detail_report_nav_{sdate(start_date)}_{sdate(end_date)}_0")],
        [
            InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥—ã", callback_data=f"choose_date_exp_{sdate(start_date)}_{sdate(end_date)}"),
            InlineKeyboardButton("üì¶ –ù–∞–∫–ª–∞–¥–Ω—ã–µ", callback_data=f"choose_date_sup_{sdate(start_date)}_{sdate(end_date)}")
        ],
        [InlineKeyboardButton("üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data="view_reports_menu")]
    ]
def add_inventory_operation(op_type, amount, comment, user):
    ws = GSHEET.worksheet("–û—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞")
    ws.append_row([sdate(), op_type, amount, comment, user])

# --- –ò –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¢–û–ñ–ï –ó–ê–ú–ï–ù–ò–¢–ï ---
def get_inventory_balance():
    ws = GSHEET.worksheet("–û—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞")
    rows = ws.get_all_values()[1:]
    balance = 0
    for row in rows:
        try:
            op_type = row[1]
            # –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –¥–ª—è –ø–µ—Ä–µ—É—á–µ—Ç–∞)
            amount = float(row[2].replace(',', '.')) if len(row) > 2 and row[2] else 0

            if op_type == "–°—Ç–∞—Ä—Ç":
                balance = amount
            elif op_type == "–ü—Ä–∏—Ö–æ–¥":
                balance += amount
            elif op_type == "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞":
                balance += amount
            elif op_type in ["–ü—Ä–æ–¥–∞–∂–∞", "–°–ø–∏—Å–∞–Ω–∏–µ"]:
                balance -= amount
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ü–µ—Ä–µ—É—á–µ—Ç–∞ ---
            elif op_type == "–ü–µ—Ä–µ—É—á–µ—Ç":
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–≤–Ω—ã–º —Å—É–º–º–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ –ø–µ—Ä–µ—É—á–µ—Ç–∞
                balance = amount
        except (ValueError, IndexError):
            continue
    return balance

def get_debts_page(debts, page=0, page_size=10):
    total = len(debts)
    start = page * page_size
    end = start + page_size
    page_debts = debts[start:end]
    return page_debts, total

def debts_message_and_keyboard(debts, page, page_size):
    page_debts, total = get_debts_page(debts, page, page_size)
    msg = ""
    for idx, debt in enumerate(page_debts, start=1 + page * page_size):
        msg += f"{idx}. {debt['name']} ‚Äî {debt['amount']}‚Ç¥ ‚Äî {debt['date']}\n"
    i
    # –ö–Ω–æ–ø–∫–∏
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"debts_page_{page-1}"))
    if (page + 1) * page_size < total:
        buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"debts_page_{page+1}"))
    
    keyboard = InlineKeyboardMarkup([buttons]) if buttons else None
    
    return msg or "–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.", keyboard

def add_salary_record(seller, salary_type, amount, comment):
    ws = GSHEET.worksheet(SHEET_SALARIES)
    ws.append_row([sdate(), seller, salary_type, amount, comment])

def build_debts_history_keyboard(rows, page=0, per_page=10):
    # rows ‚Äî —ç—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    paged_rows = rows[::-1][page*per_page:(page+1)*per_page]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10, –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
    kb = []
    text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤ (—Å—Ç—Ä. {}/{}):</b>\n\n".format(page+1, (len(rows)+per_page-1)//per_page)
    for i, row in enumerate(paged_rows, 1):
        num = (page*per_page)+i
        status = "‚úÖ" if row[6].strip().lower() == "–¥–∞" else "üü†"
        text += (
            f"<b>#{num} {status} {row[1]}</b>\n"
            f"   ‚Ä¢ –î–∞—Ç–∞: {row[0]}\n"
            f"   ‚Ä¢ –°—É–º–º–∞: <b>{float(row[2]):.2f}‚Ç¥</b>\n"
            f"   ‚Ä¢ –°—Ä–æ–∫: {row[5]}\n"
            f"   ‚Ä¢ –û–ø–ª–∞—á–µ–Ω?: {row[6]}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    # –ö–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ #1", "–ü–æ–¥—Ä–æ–±–Ω–µ–µ #2", ...
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (—Å—Ç—Ä–µ–ª–∫–∏)
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"debts_history_{page-1}"))
    if (page+1)*per_page < len(rows):
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è –ï—â—ë", callback_data=f"debts_history_{page+1}"))
    if nav_row:
        kb.append(nav_row)
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debts_menu")])
    return text, InlineKeyboardMarkup(kb)


# --- –û–°–¢–ê–¢–û–ö –ú–ê–ì–ê–ó–ò–ù–ê, –ü–ï–†–ï–£–ß–ï–¢–´ –ò –°–ï–ô–§ ---
def add_safe_operation(op_type, amount, comment, user):
    ws = GSHEET.worksheet("–°–µ–π—Ñ")
    ws.append_row([sdate(), op_type, amount, comment, user])

# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ë–õ–û–ö –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ---

def get_sellers_comparison_data(context: ContextTypes.DEFAULT_TYPE, sellers_list: list, days_period: int = 30):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏."""
    today = dt.date.today()
    start_date = today - dt.timedelta(days=days_period)
    
    reports = get_cached_sheet_data(context, SHEET_REPORT)
    if not reports:
        return None

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { '–õ—é–¥–º–∏–ª–∞': {'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': [50283, 48000], '–≤—Ç–æ—Ä–Ω–∏–∫': [41000]}, '–ú–∞—Ä–∏—è': {...} }
    sales_data = {seller: defaultdict(list) for seller in sellers_list}

    for row in reports:
        try:
            report_date = pdate(row[0])
            report_seller = row[1]
            total_sales = float(row[4].replace(',', '.'))
            
            if report_seller in sellers_list and start_date <= report_date <= today:
                dow_name = DAYS_OF_WEEK_RU[report_date.weekday()]
                sales_data[report_seller][dow_name].append(total_sales)
        except (ValueError, IndexError, TypeError):
            continue
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ
    avg_stats = {seller: {} for seller in sellers_list}
    for seller, dow_sales in sales_data.items():
        for day_name, sales_list in dow_sales.items():
            avg_stats[seller][day_name] = sum(sales_list) / len(sales_list) if sales_list else 0
            
    return avg_stats

def generate_comparison_chart(stats_data: dict) -> io.BytesIO:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤."""
    sellers = list(stats_data.keys())
    days = DAYS_OF_WEEK_RU
    
    x = np.arange(len(days))  # the label locations
    width = 0.35  # the width of the bars
    multiplier = 0

    plt.style.use('seaborn-v0_8-darkgrid')
    fig, ax = plt.subplots(figsize=(12, 7), layout='constrained')

    for seller, dow_avg_sales in stats_data.items():
        sales = [dow_avg_sales.get(day, 0) for day in days]
        offset = width * multiplier
        rects = ax.bar(x + offset, sales, width, label=seller, alpha=0.8)
        ax.bar_label(rects, padding=3, fmt='%.0f')
        multiplier += 1

    ax.set_ylabel('–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂, ‚Ç¥')
    ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
    ax.set_xticks(x + width / (len(sellers) / 2) - width/2 , days) # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∏
    ax.legend(loc='upper left', ncols=len(sellers))
    ax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)

    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)
    return buf

def get_safe_balance(context: ContextTypes.DEFAULT_TYPE):
    """–°—á–∏—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Å–µ–π—Ñ–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    rows = get_cached_sheet_data(context, "–°–µ–π—Ñ")
    if rows is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–µ–π—Ñ–∞.")
        return 0

    balance = 0
    for row in rows:
        try:
            op_type = row[1]
            amount = float(row[2].replace(',', '.')) if row[2] else 0
            if op_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
                balance += amount
            elif op_type in ["–°–Ω—è—Ç–∏–µ", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–†–∞—Å—Ö–æ–¥"]:
                balance -= amount
        except (ValueError, IndexError):
            continue
    return balance

def build_edit_invoice_keyboard(invoice_data: list, selected_fields: dict, row_index: int):
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π."""
    fields = {
        'amount_income': "–°—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–∞", 'writeoff': "–í–æ–∑–≤—Ä–∞—Ç/—Å–ø–∏—Å–∞–Ω–∏–µ",
        'markup_amount': "–°—É–º–º–∞ –ø–æ—Å–ª–µ –Ω–∞—Ü–µ–Ω–∫–∏", 'pay_type': "–¢–∏–ø –æ–ø–ª–∞—Ç—ã",
        'due_date': "–î–∞—Ç–∞ –¥–æ–ª–≥–∞", 'comment': "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    }
    
    kb = []
    for field_key, field_name in fields.items():
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–î–∞—Ç–∞ –¥–æ–ª–≥–∞", –µ—Å–ª–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã - –Ω–µ "–î–æ–ª–≥"
        current_pay_type = selected_fields.get('pay_type', invoice_data[6])
        if field_key == 'due_date' and current_pay_type != "–î–æ–ª–≥":
            continue
            
        icon = "‚úÖ" if field_key in selected_fields else "‚ùå"
        kb.append([InlineKeyboardButton(f"{icon} {field_name}", callback_data=f"edit_invoice_toggle_{row_index}_{field_key}")])

    kb.append([
        InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"edit_invoice_save_{row_index}"),
        InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"edit_invoice_cancel_{row_index}")
    ])
    return InlineKeyboardMarkup(kb)


def update_plan_in_sheet(row_num: int, field: str, new_value) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ –≤ –ü–ª–∞–Ω–§–∞–∫—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False."""
    try:
        ws = GSHEET.worksheet(SHEET_PLAN_FACT)
        col_map = {'amount': 3, 'pay_type': 4}
        col_num = col_map.get(field)
        if not col_num:
            logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: {field}")
            return False
        ws.update_cell(row_num, col_num, str(new_value))
        logging.info(f"–ü–ª–∞–Ω –≤ —Å—Ç—Ä–æ–∫–µ {row_num} –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ–ª–µ: {field}, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏ ({row_num}, {col_num}): {e}")
        return False

# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ ---
def get_todays_actual_invoices():
    """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
    if not GSHEET: return {}
    try:
        today_str = sdate()
        ws = GSHEET.worksheet(SHEET_SUPPLIERS)
        rows = ws.get_all_values()[1:]
        
        actual_data = {}
        for row in rows:
            # [–î–∞—Ç–∞, –ü–æ—Å—Ç–∞–≤—â–∏–∫, ..., –ö –æ–ø–ª–∞—Ç–µ, ..., –¢–∏–ø –æ–ø–ª–∞—Ç—ã]
            if len(row) > 6 and row[0].strip() == today_str:
                supplier_name = row[1].strip()
                actual_amount = row[4]
                actual_pay_type = row[6]
                actual_data[supplier_name] = {'amount': actual_amount, 'pay_type': actual_pay_type}
        return actual_data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        return {}
#–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏
# <<< –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –î–õ–Ø –í–°–¢–ê–í–ö–ò: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–†–ü–õ–ê–¢–ê–ú–ò >>>

def get_current_payroll_period():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É —Ç–µ–∫—É—â–µ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""
    today = dt.date.today()
    # –ó–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è 24-–≥–æ —á–∏—Å–ª–∞
    if today.day <= 24:
        # –ü–µ—Ä–∏–æ–¥ —Å 25-–≥–æ —á–∏—Å–ª–∞ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ 24-–µ —Ç–µ–∫—É—â–µ–≥–æ
        end_date = dt.date(today.year, today.month, 24)
        start_date = end_date - dt.timedelta(days=end_date.day-1) # 1-–µ —á–∏—Å–ª–æ
        start_date = dt.date(start_date.year, start_date.month -1 if start_date.month > 1 else 12, 25)

    else: # today.day > 24
        # –ü–µ—Ä–∏–æ–¥ —Å 25-–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ 24-–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ
        start_date = dt.date(today.year, today.month, 25)
        try:
            end_date = dt.date(today.year, today.month + 1, 24)
        except ValueError: # –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –≥–æ–¥
            end_date = dt.date(today.year + 1, 1, 24)
            
    return start_date, end_date

# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
def calculate_accrued_bonus(seller_name: str, all_reports=None, all_salaries=None):
    """
    –°—á–∏—Ç–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –±–æ–Ω—É—Å–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (–í—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è) - (–í—Å–µ –≤—ã–ø–ª–∞—Ç—ã).
    """
    start_period, end_period = get_current_payroll_period()
    
    # 1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, —á–∏—Ç–∞–µ–º –∏—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    if all_reports is None:
        try:
            ws_reports = GSHEET.worksheet(SHEET_REPORT)
            all_reports = ws_reports.get_all_values()[1:]
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞: {e}")
            all_reports = []
    
    if all_salaries is None:
        try:
            ws_salaries = GSHEET.worksheet(SHEET_SALARIES)
            all_salaries = ws_salaries.get_all_values()[1:]
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç –∑–∞—Ä–ø–ª–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞: {e}")
            all_salaries = []

    # 2. –°—á–∏—Ç–∞–µ–º –û–ë–©–£–Æ –°–£–ú–ú–£ –≤—Å–µ—Ö –ù–ê–ß–ò–°–õ–ï–ù–ù–´–• –±–æ–Ω—É—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
    total_accrued = 0
    bonus_days = []
    for row in all_reports:
        try:
            report_date = pdate(row[0])
            report_seller = row[1]
            total_sales = float(row[4].replace(',', '.'))
            
            if start_period <= report_date <= end_period and report_seller == seller_name:
                if bonus > 0:
                    total_accrued += bonus
                    bonus_days.append({'date': sdate(report_date), 'sales': total_sales, 'bonus': bonus})
        except (ValueError, IndexError, TypeError):
            continue
                   
    # 3. –°—á–∏—Ç–∞–µ–º –û–ë–©–£–Æ –°–£–ú–ú–£ –≤—Å–µ—Ö –í–´–ü–õ–ê–ß–ï–ù–ù–´–• –±–æ–Ω—É—Å–æ–≤ –∑–∞ —ç—Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥
    total_paid_out = 0
    period_str = f"–∑–∞ –ø–µ—Ä–∏–æ–¥ {sdate(start_period)}-{sdate(end_period)}"
    for row in all_salaries:
        try:
            # –ò—â–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–ª–∞—Ç–µ –±–æ–Ω—É—Å–∞ –∏–º–µ–Ω–Ω–æ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
            if row[1] == seller_name and "–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞" in row[2] and period_str in row[4]:
                paid_amount = float(row[3].replace(',', '.'))
                total_paid_out += paid_amount
        except (ValueError, IndexError):
            continue
    
    # 4. –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫ –≤—ã–ø–ª–∞—Ç–µ
    bonus_to_pay = total_accrued - total_paid_out
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å
    bonus_to_pay = max(0, round(bonus_to_pay, 2))

    return bonus_to_pay, bonus_days
async def staff_management_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º."""
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...") # –î–∞–µ–º –ø–æ–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç —Ä–∞–±–æ—Ç–∞

    sellers_to_check = ["–õ—é–¥–º–∏–ª–∞", "–ú–∞—Ä–∏—è"]
    kb = []
    
    try:
        # –û–î–ò–ù –†–ê–ó —á–∏—Ç–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        ws_reports = GSHEET.worksheet(SHEET_REPORT)
        all_reports = ws_reports.get_all_values()[1:]
        
        ws_salaries = GSHEET.worksheet(SHEET_SALARIES)
        all_salaries = ws_salaries.get_all_values()[1:]

        for seller in sellers_to_check:
            # –ü–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é
            bonus, _ = calculate_accrued_bonus(seller, all_reports, all_salaries)
            btn_text = f"{seller} (–ë–æ–Ω—É—Å –∫ –≤—ã–ø–ª–∞—Ç–µ: {bonus:.2f}‚Ç¥)"
            kb.append([InlineKeyboardButton(btn_text, callback_data=f"view_salary_{seller}")])

    except Exception as e:
        await query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return

    kb.append([InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    await query.message.edit_text("<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ:",
                                  parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))

# --- –î–û–ë–ê–í–¨–¢–ï –í–ï–°–¨ –≠–¢–û–¢ –ë–õ–û–ö –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ---

async def edit_invoice_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π."""
    query = update.callback_query
    await query.answer()
    
    row_index = int(query.data.split('_')[-1])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['edit_invoice'] = {
        'row_index': row_index,
        'selected_fields': {}, # –ü–æ–ª—è, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –≥–∞–ª–æ—á–∫–æ–π
        'new_values': {} # –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª–µ–π
    }
    
    all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)
    invoice_data = all_invoices[row_index - 2]
    
    kb = build_edit_invoice_keyboard(invoice_data, {}, row_index)
    await query.message.edit_text("<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–ª–æ—á–∫–∞–º–∏ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'.",
                                  parse_mode=ParseMode.HTML, reply_markup=kb)

async def edit_invoice_toggle_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç (‚úÖ/‚ùå) –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    row_index = int(parts[3])
    field_key = "_".join(parts[4:])
    
    edit_state = context.user_data.get('edit_invoice', {})
    if edit_state.get('row_index') != row_index: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if field_key in edit_state['selected_fields']:
        del edit_state['selected_fields'][field_key]
    else:
        edit_state['selected_fields'][field_key] = None # –ü—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ–Ω–æ –≤—ã–±—Ä–∞–Ω–æ

    all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)
    invoice_data = all_invoices[row_index - 2]
    kb = build_edit_invoice_keyboard(invoice_data, edit_state['selected_fields'], row_index)
    await query.message.edit_text("<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–ª–æ—á–∫–∞–º–∏ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'.",
                                  parse_mode=ParseMode.HTML, reply_markup=kb)


# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def execute_invoice_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ—Å—á–µ—Ç—ã, –≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–æ–ª–≥–æ–≤."""
    query = update.callback_query
    await query.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏—è...", show_alert=False)

    edit_state = context.user_data.get('edit_invoice', {})
    row_index = edit_state.get('row_index')
    new_values = edit_state.get('new_values', {})

    if not row_index:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–µ—Ä—è–Ω–∞.")
        return

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏–π
    all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)
    old_row = all_invoices[row_index - 2]
    old_to_pay = float(old_row[4].replace(',', '.'))
    old_markup = float(old_row[5].replace(',', '.'))
    old_pay_type = old_row[6]
    original_date = old_row[0]
    original_supplier = old_row[1]
    
    # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä—è–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
    for field, new_value in new_values.items():
        update_invoice_in_sheet(row_index, field, new_value)
    
    # 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if 'sheets_cache' in context.bot_data:
        context.bot_data['sheets_cache'].pop(SHEET_SUPPLIERS, None)
    
    all_invoices_new = get_cached_sheet_data(context, SHEET_SUPPLIERS)
    new_row = all_invoices_new[row_index - 2]
    
    # 3.1. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º "–ö –æ–ø–ª–∞—Ç–µ"
    new_income = float(new_row[2].replace(',', '.'))
    new_writeoff = float(new_row[3].replace(',', '.'))
    new_to_pay = new_income - new_writeoff
    update_invoice_in_sheet(row_index, 'to_pay', f"{new_to_pay:.2f}")

    # 4. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    who = query.from_user.first_name
    comment_prefix = f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∫–ª. –æ—Ç {original_date} ({original_supplier})"
    new_pay_type = new_row[6]
    
    # 4.1. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    new_markup = float(new_row[5].replace(',', '.'))
    markup_diff = new_markup - old_markup
    if abs(markup_diff) > 0.01:
        add_inventory_operation("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", markup_diff, comment_prefix, who)

    # 4.2. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–µ–π—Ñ–∞
    old_spent_from_safe = 0 if old_pay_type == "–î–æ–ª–≥" else old_to_pay
    new_spent_from_safe = 0 if new_pay_type == "–î–æ–ª–≥" else new_to_pay
    safe_diff = new_spent_from_safe - old_spent_from_safe
    if abs(safe_diff) > 0.01:
        op_type = "–†–∞—Å—Ö–æ–¥" if safe_diff > 0 else "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        add_safe_operation(op_type, abs(safe_diff), comment_prefix, who)
        if 'sheets_cache' in context.bot_data:
            context.bot_data['sheets_cache'].pop("–°–µ–π—Ñ", None)

    # 5. –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç "–î–æ–ª–≥–∏"
    ws_debts = GSHEET.worksheet(SHEET_DEBTS)
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –º–æ–≥–ª–∏ –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    debts_rows = get_cached_sheet_data(context, SHEET_DEBTS, force_update=True) 
    found_debt_row_index = -1
    for i, debt_row in enumerate(debts_rows):
        if debt_row[0] == original_date and debt_row[1] == original_supplier:
            found_debt_row_index = i + 2
            break
            
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –¢–µ–ø–µ—Ä—å —ç—Ç–æ –¥–æ–ª–≥ (–∞ —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª, –∏–ª–∏ –±—ã–ª, –Ω–æ —Å—É–º–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
    if new_pay_type == "–î–æ–ª–≥":
        due_date = new_row[9] if len(new_row) > 9 and new_row[9] else ""
        if found_debt_row_index != -1:
            logging.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–ª–≥ –≤ —Å—Ç—Ä–æ–∫–µ {found_debt_row_index}")
            ws_debts.update_cell(found_debt_row_index, 3, new_to_pay)
            current_paid = float(ws_debts.cell(found_debt_row_index, 4).value.replace(',', '.'))
            new_balance = new_to_pay - current_paid
            ws_debts.update_cell(found_debt_row_index, 5, new_balance)
            if 'due_date' in new_values:
                ws_debts.update_cell(found_debt_row_index, 6, new_values['due_date'])
        else:
            logging.info("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –¥–æ–ª–≥–µ.")
            ws_debts.append_row([original_date, original_supplier, new_to_pay, 0, new_to_pay, due_date, "–ù–µ—Ç", "–ù–∞–ª–∏—á–Ω—ã–µ"])
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –≠—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–≥ (–∞ —Ä–∞–Ω—å—à–µ –±—ã–ª)
    elif old_pay_type == "–î–æ–ª–≥" and new_pay_type != "–î–æ–ª–≥":
        if found_debt_row_index != -1:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –ø–æ–º–µ—Ç–∫–∏ ---
            logging.info(f"–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –æ –¥–æ–ª–≥–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ {found_debt_row_index}")
            ws_debts.delete_rows(found_debt_row_index)

    # 6. –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏" —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    if new_pay_type != "–î–æ–ª–≥":
        update_invoice_in_sheet(row_index, 'due_date', "") # –û—á–∏—â–∞–µ–º —Å—Ä–æ–∫ –¥–æ–ª–≥–∞

    final_paid_status = "–î–∞" if new_pay_type != "–î–æ–ª–≥" else "–ù–µ—Ç"
    final_debt_amount = new_to_pay if new_pay_type == "–î–æ–ª–≥" else 0
    update_invoice_in_sheet(row_index, 'paid_status', final_paid_status)
    update_invoice_in_sheet(row_index, 'debt_amount', f"{final_debt_amount:.2f}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    context.user_data.pop('edit_invoice', None)
    await query.message.edit_text("‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã.",
                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"edit_invoice_cancel_{row_index}")]]))


async def show_seller_salary_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –±–æ–Ω—É—Å–æ–≤ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏."""
    query = update.callback_query
    seller_name = query.data.split('_', 2)[2]
    await query.answer()

    bonus_to_pay, bonus_days = calculate_accrued_bonus(seller_name)
    start_period, end_period = get_current_payroll_period()

    msg = f"<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–Ω—É—Å–æ–≤ –¥–ª—è {seller_name}</b>\n"
    msg += f"<i>–ü–µ—Ä–∏–æ–¥: {sdate(start_period)} - {sdate(end_period)}</i>\n\n"

    if not bonus_days:
        msg += "–ù–∞—á–∏—Å–ª–µ–Ω–∏–π –±–æ–Ω—É—Å–æ–≤ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç."
    else:
        for day in bonus_days:
            msg += f" ‚Ä¢ {day['date']}: +{day['bonus']:.2f}‚Ç¥ (–æ—Ç –ø—Ä–æ–¥–∞–∂ {day['sales']:.2f}‚Ç¥)\n"
    
    msg += f"\n<b>–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ: {bonus_to_pay:.2f}‚Ç¥</b>"
    
    kb = []
    if bonus_to_pay > 0:
        kb.append([InlineKeyboardButton(f"‚úÖ –í—ã–ø–ª–∞—Ç–∏—Ç—å {bonus_to_pay:.2f}‚Ç¥", callback_data=f"confirm_payout_{seller_name}_{bonus_to_pay}")])
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É ---
    kb.append([InlineKeyboardButton(f"üìú –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≤—ã–ø–ª–∞—Ç", callback_data=f"salary_history_{seller_name}_0")])
    
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="staff_management")])
    await query.message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))

async def show_sellers_comparison(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤."""
    query = update.callback_query
    await query.message.edit_text("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ —Ä–∏—Å—É—é –≥—Ä–∞—Ñ–∏–∫...")

    sellers_to_compare = ["–õ—é–¥–º–∏–ª–∞", "–ú–∞—Ä–∏—è"]
    comparison_data = get_sellers_comparison_data(context, sellers_to_compare)

    if not comparison_data:
        await query.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.", 
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="seller_stats")]]))
        return
        
    image_buffer = generate_comparison_chart(comparison_data)
    
    msg = "<b>üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤</b> (—Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)\n\n"
    for day in DAYS_OF_WEEK_RU:
        msg += f"<b>{day.capitalize()}:</b>\n"
        for seller in sellers_to_compare:
            avg_sale = comparison_data.get(seller, {}).get(day, 0)
            msg += f"  - <i>{seller}:</i> {avg_sale:.2f}‚Ç¥\n"

    await query.message.delete()
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=image_buffer,
        caption=msg,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="seller_stats")]])
    )


async def confirm_payout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã."""
    query = update.callback_query
    _, _, seller_name, amount_str = query.data.split('_')
    amount = float(amount_str)
    await query.answer()
    
    text = (f"‚ùóÔ∏è<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>‚ùóÔ∏è\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å –ø—Ä–æ–¥–∞–≤—Ü—É <b>{seller_name}</b> "
            f"–≤ —Ä–∞–∑–º–µ—Ä–µ <b>{amount:.2f}‚Ç¥</b>?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
    
    kb = [[
        InlineKeyboardButton("‚úÖ –î–∞, –≤—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"execute_payout_{seller_name}_{amount}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_salary_{seller_name}")
    ]]
    await query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))

# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---

async def safe_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º 'context' –≤ —Ñ—É–Ω–∫—Ü–∏—é
    bal = get_safe_balance(context)
    
    await query.message.edit_text(
        f"üíµ –û—Å—Ç–∞—Ç–æ–∫ –≤ —Å–µ–π—Ñ–µ: <b>{bal:.2f}‚Ç¥</b>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stock_safe_menu")]])
    )
async def execute_payout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–ø–ª–∞—Ç—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    query = update.callback_query
    _, _, seller_name, amount_str = query.data.split('_')
    amount = float(amount_str)
    await query.answer()

    start_period, end_period = get_current_payroll_period()
    period_str = f"–∑–∞ –ø–µ—Ä–∏–æ–¥ {sdate(start_period)}-{sdate(end_period)}"
    
    try:
        ws = GSHEET.worksheet(SHEET_SALARIES)
        ws.append_row([sdate(), seller_name, "–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞", amount, period_str])
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        msg = f"‚úÖ –ë–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {amount:.2f}‚Ç¥ –¥–ª—è {seller_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–ª–∞—á–µ–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é."
        kb = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        await query.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(kb))

    except Exception as e:
        await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—ã–ø–ª–∞—Ç—ã: {e}")



# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def show_salary_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¢–û–õ–¨–ö–û –í–´–ü–õ–ê–ß–ï–ù–ù–´–• –ë–û–ù–£–°–û–í –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞."""
    query = update.callback_query
    
    try:
        _, _, seller_name, page_str = query.data.split('_')
        page = int(page_str)
    except (ValueError, IndexError):
        await query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)
        return
        
    await query.answer()

    try:
        ws = GSHEET.worksheet(SHEET_SALARIES)
        all_rows = ws.get_all_values()[1:]
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø—É "–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞" ---
        seller_rows = [
            row for row in all_rows 
            if len(row) > 2 and row[1] == seller_name and row[2] == "–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞"
        ]
        seller_rows.reverse() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å–Ω–∞—á–∞–ª–∞
    except Exception as e:
        await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç: {e}")
        return

    per_page = 5 # –£–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    total_records = len(seller_rows)
    total_pages = math.ceil(total_records / per_page) if total_records > 0 else 1
    page = max(0, min(page, total_pages - 1))

    start_index = page * per_page
    end_index = start_index + per_page
    page_records = seller_rows[start_index:end_index]

    msg = f"<b>üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç –±–æ–Ω—É—Å–æ–≤ –¥–ª—è {seller_name}</b>\n(–°—Ç—Ä. {page + 1}/{total_pages})\n"

    if not page_records:
        msg += "\n<i>–ó–∞–ø–∏—Å–µ–π –æ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>"
    else:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ù–æ–≤—ã–π –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ ---
        for row in page_records:
            date = row[0] if len(row) > 0 else ""
            amount = row[3] if len(row) > 3 else "0"
            comment = row[4] if len(row) > 4 else "" # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–∏–æ–¥
            
            msg += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            msg += f"üóì <i>{date}</i>\n"
            msg += f"üí∞ <b>–°—É–º–º–∞:</b> {amount}‚Ç¥\n"
            msg += f"üìã <b>–î–µ—Ç–∞–ª–∏:</b> –í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞ {comment}\n"

    kb_nav = []
    if page > 0:
        kb_nav.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"salary_history_{seller_name}_{page - 1}"))
    if (page + 1) < total_pages:
        kb_nav.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"salary_history_{seller_name}_{page + 1}"))

    kb = []
    if kb_nav:
        kb.append(kb_nav)
    
    kb.append([InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data=f"view_salary_{seller_name}")])

    await query.message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
def update_supplier_payment(supplier_name, amount, user_name, debt_closed, debt_id=None):
    ws_sup = GSHEET.worksheet(SHEET_SUPPLIERS)
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å debt_id, –∏—â–µ–º –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É, –∏–Ω–∞—á–µ ‚Äî –ø–æ –∏–º–µ–Ω–∏
        if debt_id:
            cell = ws_sup.find(debt_id)
            if not cell:
                return
            row_num = cell.row
        else:
            # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ (–ø–µ—Ä–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            cell = ws_sup.find(supplier_name)
            if not cell:
                return
            row_num = cell.row

        row = ws_sup.row_values(row_num)
        debt_col = 9  # "–î–æ–ª–≥" ‚Äî 9-—è –∫–æ–ª–æ–Ω–∫–∞ (–ø—Ä–æ–≤–µ—Ä—å —É —Å–µ–±—è!)
        paid_col = 8  # "–û–ø–ª–∞—á–µ–Ω–æ" ‚Äî 8-—è –∫–æ–ª–æ–Ω–∫–∞
        hist_col = 13 # "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–≥–∞—à–µ–Ω–∏–π" ‚Äî 13-—è –∫–æ–ª–æ–Ω–∫–∞
        who_col = 12  # "–ö—Ç–æ –≤–Ω—ë—Å" ‚Äî 12-—è –∫–æ–ª–æ–Ω–∫–∞

        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–≥–∞—à–µ–Ω–∏–π
        old_history = ws_sup.cell(row_num, hist_col).value or ""
        new_history = old_history + f"{sdate()}: {amount:.2f}‚Ç¥ ({user_name}); "
        ws_sup.update_cell(row_num, hist_col, new_history)
        # –û–±–Ω–æ–≤–∏–º –¥–æ–ª–≥
        old_debt = float(row[debt_col - 1]) if len(row) >= debt_col and row[debt_col - 1] else 0
        new_debt = old_debt - amount
        ws_sup.update_cell(row_num, debt_col, max(new_debt, 0))
        # –û–ø–ª–∞—á–µ–Ω–æ ‚Äî –µ—Å–ª–∏ –¥–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç
        if debt_closed or new_debt <= 0:
            ws_sup.update_cell(row_num, paid_col, f"–î–∞ ({float(row[4]):.2f})")
        # –ö—Ç–æ –ø–æ–≥–∞—Å–∏–ª
        ws_sup.update_cell(row_num, who_col, user_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø—Ä–∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –¥–æ–ª–≥–∞: {e}")


async def search_debts_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['search_debt'] = {}
    await query.message.edit_text("üîé –í–≤–µ–¥–∏—Ç–µ –°–£–ú–ú–ê –∏–ª–∏ –ò–ú–Ø –∏–ª–∏ –î–ê–¢–£ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=back_kb())

# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –í –í–ê–® –ö–û–î ---
async def show_report(update: Update, context: ContextTypes.DEFAULT_TYPE, start_date, end_date):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –≤—ã–∑–æ–≤, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
    if hasattr(update, "callback_query") and update.callback_query:
        query = update.callback_query
        await query.answer("–ó–∞–≥—Ä—É–∂–∞—é –æ—Ç—á–µ—Ç...")
        msg_func = query.message.edit_text
    else:
        msg_func = update.message.reply_text

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö –ª–∏—Å—Ç–æ–≤
    report_rows = get_cached_sheet_data(context, SHEET_REPORT)
    exp_rows = get_cached_sheet_data(context, SHEET_EXPENSES)
    sup_rows = get_cached_sheet_data(context, SHEET_SUPPLIERS)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    if report_rows is None or exp_rows is None or sup_rows is None:
        await msg_func("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–¥–Ω–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
    days = defaultdict(list)
    for row in report_rows:
        try:
            row_date = pdate(row[0])
            if row_date and start_date <= row_date <= end_date:
                days[sdate(row_date)].append(row)
        except (ValueError, IndexError):
            continue

    expenses_by_day = defaultdict(float)
    for row in exp_rows:
        try:
            exp_date = pdate(row[0])
            if exp_date and start_date <= exp_date <= end_date and len(row) > 1 and row[1]:
                expenses_by_day[sdate(exp_date)] += float(row[1].replace(',', '.'))
        except (ValueError, IndexError):
            continue

    suppliers_by_day = defaultdict(float)
    for row in sup_rows:
        try:
            sup_date = pdate(row[0])
            if len(row) > 2 and row[2] and sup_date and start_date <= sup_date <= end_date:
                suppliers_by_day[sdate(sup_date)] += float(row[2].replace(',', '.'))
        except (ValueError, IndexError):
            continue

    response = f"üìä –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {sdate(start_date)} ‚Äî {sdate(end_date)}\n\n"
    total_cash = total_terminal = total_expenses = total_suppliers = 0

    if not days:
        response += "<i>–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç —Å–¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω.</i>"
    else:
        for day, day_rows in sorted(days.items(), key=lambda item: pdate(item[0])):
            for r in day_rows:
                cash = float(r[2].replace(',', '.')) if len(r) > 2 and r[2] else 0
                terminal = float(r[3].replace(',', '.')) if len(r) > 3 and r[3] else 0
                seller = r[1]
                response += f"üìÖ <b>{day}</b> ({seller})\n   üíµ {cash:.2f}‚Ç¥ | üí≥ {terminal:.2f}‚Ç¥\n"
                exp = expenses_by_day.get(day, 0)
                sup = suppliers_by_day.get(day, 0)
                response += f"   üí∏ –†–∞—Å—Ö–æ–¥—ã: {exp:.2f}‚Ç¥ | üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {sup:.2f}‚Ç¥\n"
                response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                total_cash += cash
                total_terminal += terminal
                total_expenses += exp
                total_suppliers += sup

    response += (
        f"\n<b>–ò—Ç–æ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b>\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {total_cash:.2f}‚Ç¥\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {total_terminal:.2f}‚Ç¥\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {total_expenses:.2f}‚Ç¥\n"
        f"üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {total_suppliers:.2f}‚Ç¥\n"
        f"üè¶ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{(total_cash + total_terminal) - (total_expenses + total_suppliers):.2f}‚Ç¥</b>"
    )

    kb = week_buttons(start_date, end_date) if (end_date - start_date).days <= 7 else month_buttons(start_date, end_date)

    try:
        await msg_func(response, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
    except BadRequest as e:
        if "Message is not modified" in str(e):
            pass 
        else:
            raise

# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def show_daily_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∏ –ø–æ–ª–Ω—É—é –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å."""
    query = update.callback_query
    await query.answer("–°–æ–±–∏—Ä–∞—é –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é —Å–≤–æ–¥–∫—É...")

    today_str = sdate()
    today = pdate(today_str)

    # --- 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ ---
    all_data = {
        sheet: get_cached_sheet_data(context, sheet)
        for sheet in [SHEET_SHIFTS, SHEET_PLAN_FACT, SHEET_SUPPLIERS, SHEET_DEBTS, SHEET_EXPENSES, SHEET_INVENTORY]
    }
    if any(data is None for data in all_data.values()):
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
    # –ö—Ç–æ –Ω–∞ —Å–º–µ–Ω–µ
    on_shift_today = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    for row in all_data[SHEET_SHIFTS]:
        if row and row[0] == today_str:
            on_shift_today = ", ".join([seller for seller in row[1:] if seller])
            break
    
    # –ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    todays_plans = {row[1].strip(): row for row in all_data[SHEET_PLAN_FACT] if row and row[0] == today_str}
    todays_invoices_suppliers = {row[1].strip() for row in all_data[SHEET_SUPPLIERS] if row and row[0] == today_str}
    
    arrived_suppliers_text = []
    pending_suppliers_data = []
    
    for planned_supplier, plan_data in todays_plans.items():
        planned_amount = plan_data[2]
        planned_pay_type = plan_data[3]
        planned_pay_type_human = "–ù–∞–ª–∏—á–Ω—ã–µ" if '–Ω–∞–ª–∏—á' in planned_pay_type.lower() else "–ö–∞—Ä—Ç–∞" if '–∫–∞—Ä—Ç' in planned_pay_type.lower() else "–î–æ–ª–≥"

        if planned_supplier in todays_invoices_suppliers:
            actual_invoice = next((inv for inv in all_data[SHEET_SUPPLIERS] if inv[0] == today_str and inv[1].strip() == planned_supplier), None)
            actual_amount_str = actual_invoice[4].replace(',', '.') if actual_invoice and len(actual_invoice) > 4 else "0"
            actual_amount = f"{float(actual_amount_str):.2f}"
            actual_pay_type = actual_invoice[6] if actual_invoice and len(actual_invoice) > 6 else planned_pay_type_human
            arrived_suppliers_text.append(f"  ‚úÖ {planned_supplier} (—Ñ–∞–∫—Ç: {actual_amount}‚Ç¥) (–ø–ª–∞–Ω: {planned_amount}‚Ç¥ - {planned_pay_type_human})")
        else:
            pending_suppliers_data.append(plan_data)
            arrived_suppliers_text.append(f"  ‚åõÔ∏è {planned_supplier} (–ø–ª–∞–Ω: {planned_amount}‚Ç¥ - {planned_pay_type_human})")

    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
    total_planned_cash = sum(float(row[2].replace(',', '.')) for row in todays_plans.values() if '–Ω–∞–ª–∏—á' in row[3].lower())
    needed_cash_remaining = sum(float(data[2].replace(',', '.')) for data in pending_suppliers_data if '–Ω–∞–ª–∏—á' in data[3].lower())
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–ª–≥–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    critical_debts_text = []
    for row in all_data[SHEET_DEBTS]:
        if len(row) > 6 and row[6].strip().lower() != '–¥–∞' and pdate(row[5]) == today:
            critical_debts_text.append(f"  ‚Ä¢ {row[1]} - {float(row[4].replace(',', '.')):.2f}‚Ç¥")

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å
    invoice_count_today = len(todays_invoices_suppliers)
    
    expenses_list = [f"  ‚Ä¢ {float(row[1].replace(',', '.')):.2f}‚Ç¥ - {row[2]}" for row in all_data[SHEET_EXPENSES] if row and row[0] == today_str and len(row) > 2 and row[1]]
    writeoffs_list = [f"  ‚Ä¢ {float(row[2].replace(',', '.')):.2f}‚Ç¥ - {row[3]}" for row in all_data[SHEET_INVENTORY] if row and row[0] == today_str and row[1] == "–°–ø–∏—Å–∞–Ω–∏–µ" and len(row) > 3 and row[2]]

    # --- 3. –°–æ–±–∏—Ä–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    msg = f"<b>‚òÄÔ∏è –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –Ω–∞ {today_str}</b>\n"
    msg += f"<b>üë§ –ù–∞ —Å–º–µ–Ω–µ:</b> {on_shift_today}\n"
    msg += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    msg += "<b>üöö –ü—Ä–∏–±—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–ü–ª–∞–Ω/–§–∞–∫—Ç)</b>\n"
    msg += "\n".join(arrived_suppliers_text) if arrived_suppliers_text else "<i>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–±—ã—Ç–∏–π.</i>"
    
    msg += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n<b>üí∞ –§–∏–Ω–∞–Ω—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    msg += f"  ‚Ä¢ üíµ –û–ë–©–ò–ô –ø–ª–∞–Ω –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {total_planned_cash:.2f}‚Ç¥\n"
    msg += f"  ‚Ä¢ üíµ –û—Å—Ç–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º: {needed_cash_remaining:.2f}‚Ç¥\n"
    if critical_debts_text:
        msg += "‚ùóÔ∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–ª–≥–∏ (—Å—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è):</b>\n" + "\n".join(critical_debts_text)
    
    msg += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n<b>üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å:</b>\n"
    msg += f"  ‚Ä¢ üßæ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö: {invoice_count_today}\n"
    msg += "  ‚Ä¢ üí∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Å—Å–µ:\n" + ("\n".join(expenses_list) if expenses_list else "    <i>(–Ω–µ—Ç)</i>\n")
    msg += "  ‚Ä¢ üóëÔ∏è –°–ø–∏—Å–∞–Ω–∏—è —Å –æ—Å—Ç–∞—Ç–∫–∞:\n" + ("\n".join(writeoffs_list) if writeoffs_list else "    <i>(–Ω–µ—Ç)</i>")
    
    # --- 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    kb = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="daily_summary")],
          [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –§–∏–Ω–∞–Ω—Å—ã", callback_data="finance_menu")]]
    
    try:
        await query.message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
    except BadRequest as e:
        if "Message is not modified" in str(e):
            await query.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
            
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def ask_for_invoice_edit_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π."""
    query = update.callback_query
    message = query.message if query else update.message
    
    if query:
        await query.answer()

    edit_state = context.user_data.get('edit_invoice', {})
    row_index = edit_state.get('row_index')
    
    # –ï—Å–ª–∏ –º—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
    if 'fields_to_edit_list' not in edit_state:
        fields_to_edit = list(edit_state.get('selected_fields', {}).keys())
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        field_order = ['amount_income', 'writeoff', 'markup_amount', 'comment', 'pay_type', 'due_date']
        edit_state['fields_to_edit_list'] = [f for f in field_order if f in fields_to_edit]
        edit_state['current_field_index'] = 0

    fields_to_edit = edit_state.get('fields_to_edit_list', [])
    current_index = edit_state.get('current_field_index', 0)

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    if current_index >= len(fields_to_edit):
        await show_invoice_edit_confirmation(update, context)
        return

    current_field = fields_to_edit[current_index]
    edit_state['step'] = f"editing_{current_field}"
    
    all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)
    old_data_row = all_invoices[row_index - 2]
    
    column_map = {'amount_income': 2, 'writeoff': 3, 'markup_amount': 5, 'pay_type': 6, 'due_date': 9, 'comment': 10}
    old_value = old_data_row[column_map.get(current_field)] if len(old_data_row) > column_map.get(current_field, 99) else ""

    prompts = {
        'amount_income': f"üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–∞—è: {old_value}‚Ç¥):",
        'writeoff': f"‚Ü©Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞ (—Ç–µ–∫—É—â–∞—è: {old_value}‚Ç¥):",
        'markup_amount': f"üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ –Ω–∞—Ü–µ–Ω–∫–∏ (—Ç–µ–∫—É—â–∞—è: {old_value}‚Ç¥):",
        'pay_type': f"üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –æ–ø–ª–∞—Ç—ã (—Ç–µ–∫—É—â–∏–π: {old_value}):",
        'due_date': f"üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ–ª–≥–∞ (—Ç–µ–∫—É—â–∞—è: {old_value}):",
        'comment': f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–µ–∫—É—â–∏–π: '{old_value}'):"
    }
    prompt_text = prompts.get(current_field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    
    kb = None
    if current_field == 'pay_type':
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="invoice_edit_value_–ù–∞–ª–∏—á–Ω—ã–µ")],
            [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data="invoice_edit_value_–ö–∞—Ä—Ç–∞")],
            [InlineKeyboardButton("üìÜ –î–æ–ª–≥", callback_data="invoice_edit_value_–î–æ–ª–≥")]])
    
    if query:
        await message.edit_text(prompt_text, reply_markup=kb)
    else:
        await message.reply_text(prompt_text, reply_markup=kb)
        
async def repay_debt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = parse_float(update.message.text)
        repay_data = context.user_data['repay']
        debt_idx = repay_data['debt_idx']
        who_paid = update.effective_user.first_name

        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–ª–≥ –∏–∑ context.user_data['repay_debts']
        repay_debts = context.user_data.get('repay_debts', [])
        if debt_idx >= len(repay_debts):
            await update.message.reply_text("‚ùå –î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        debt = repay_debts[debt_idx]
        date, supplier_name, total = debt[0], debt[1], float(debt[2])

        ws_debts = GSHEET.worksheet(SHEET_DEBTS)
        rows = ws_debts.get_all_values()
        # 2. –ò—â–µ–º –Ω—É–∂–Ω—ã–π –¥–æ–ª–≥ –ø–æ –¥–∞—Ç–µ+–ø–æ—Å—Ç–∞–≤—â–∏–∫+—Å—É–º–º–∞ (–∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω–¥–µ–∫—Å)
        row_idx = None
        for i, row in enumerate(rows[1:], start=2):
            if row[0] == date and row[1] == supplier_name and abs(float(row[2]) - total) < 0.01:
                row_idx = i
                break
        if not row_idx:
            await update.message.reply_text("‚ùå –î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ!")
            return

        paid = float(ws_debts.cell(row_idx, 4).value or 0)
        balance = float(ws_debts.cell(row_idx, 5).value or 0)
        new_paid = paid + amount
        new_balance = balance - amount

        ws_debts.update_cell(row_idx, 4, new_paid)
        ws_debts.update_cell(row_idx, 5, new_balance)

        debt_closed = False
        if new_balance <= 0.01:
            ws_debts.update_cell(row_idx, 7, "–î–∞")
            debt_closed = True

        # === –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –í –ü–û–°–¢–ê–í–©–ò–ö–ê–• ===
        ws_sup = GSHEET.worksheet(SHEET_SUPPLIERS)
        sup_rows = ws_sup.get_all_values()
        found_idx = None
        for idx, row in enumerate(sup_rows[1:], start=2):
            sup_date = row[0]
            sup_name = row[1]
            sup_debt = float(row[8]) if len(row) > 8 and row[8] else 0
            if sup_date == date and sup_name == supplier_name and abs(sup_debt - balance) < 0.01:
                found_idx = idx
                break

        if found_idx:
            ws_sup.update_cell(found_idx, 7+1, f"–î–∞ ({new_paid:.2f})")
            ws_sup.update_cell(found_idx, 8+1, 0)
            old_hist = ws_sup.cell(found_idx, 13).value or ""
            ws_sup.update_cell(
                found_idx, 13, 
                (old_hist or "") + f"{sdate()}: {amount:.2f}‚Ç¥ ({who_paid}); "
            )
        else:
            logging.warning("–°–≤—è–∑–∞–Ω–Ω—ã–π –¥–æ–ª–≥ –≤ '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞—Ö' –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await update.message.reply_text(
            f"‚úÖ –î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω –Ω–∞ —Å—É–º–º—É {amount:.2f}‚Ç¥\n–û—Å—Ç–∞—Ç–æ–∫: {new_balance:.2f}‚Ç¥"
            + ("\n\nüìó –°—Ç–∞—Ç—É—Å –≤ '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞—Ö' –æ–±–Ω–æ–≤–ª—ë–Ω!" if debt_closed else "")
        )
        context.user_data.pop('repay', None)
        await view_debts(update, context)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞: {str(e)}")


# –¥–∞–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ handle_planning_amount –∏ handle_planning_paytype
# <<< –ù–ê–ß–ê–õ–û: –ù–û–í–´–ô –ö–û–î –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø >>>

# --- –õ–û–ì–ò–ö–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---
DAYS_OF_WEEK_RU = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# 1. –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def start_planning(update: Update, context: ContextTypes.DEFAULT_TYPE, target_date: dt.date = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ, —á–∏—Å—Ç–æ–µ –∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    if query:
        await query.answer()

    today = dt.date.today()
    if target_date is None:
        target_date = today + dt.timedelta(days=1)

    target_date_str = sdate(target_date)
    day_of_week_name = DAYS_OF_WEEK_RU[target_date.weekday()]
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    days_until_next_sunday = (6 - today.weekday()) + 7
    end_of_planning_period = today + dt.timedelta(days=days_until_next_sunday)
    
    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
    scheduled_today = get_suppliers_for_day(day_of_week_name)
    planned_data = get_planned_suppliers(target_date_str)
    planned_names = {item['supplier'] for item in planned_data}
    unplanned_scheduled = [s for s in scheduled_today if s not in planned_names]

    # --- –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
    # 1. –ù–æ–≤—ã–π —á–∏—Å—Ç—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_text = f"üóìÔ∏è  <b>–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ù–ê {day_of_week_name.upper()}, {target_date_str}</b>"

    kb = []
    # 2. –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    prev_day = target_date - dt.timedelta(days=1)
    if prev_day > today:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥. –¥–µ–Ω—å", callback_data=f"plan_nav_{sdate(prev_day)}"))
    
    next_day = target_date + dt.timedelta(days=1)
    if next_day <= end_of_planning_period:
        nav_row.append(InlineKeyboardButton("–°–ª–µ–¥. –¥–µ–Ω—å ‚ñ∂Ô∏è", callback_data=f"plan_nav_{sdate(next_day)}"))
    
    if nav_row:
        kb.append(nav_row)
    
    # 3. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ "–£–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ" —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    kb.append([InlineKeyboardButton("--- ‚úèÔ∏è –£–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ---", callback_data="noop")])
    if not planned_data:
        kb.append([InlineKeyboardButton("(–ø—É—Å—Ç–æ)", callback_data="noop")])
    else:
        for item in planned_data:
            # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–ª –∫–æ—Ä–æ—á–µ, —á—Ç–æ–±—ã –≤–ª–µ–∑–∞—Ç—å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            btn_text = f"{item['supplier']} ({item['amount']}‚Ç¥, {item['pay_type']})"
            kb.append([
                InlineKeyboardButton(btn_text, callback_data=f"edit_plan_{item['row_index']}"),
                InlineKeyboardButton("‚ùå", callback_data=f"plan_delete_{item['row_index']}_{target_date_str}")
            ])

    # 4. –ë–ª–æ–∫ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ –≥—Ä–∞—Ñ–∏–∫—É" —Å –Ω–æ–≤—ã–º —ç–º–æ–¥–∑–∏
    kb.append([InlineKeyboardButton("--- üöö –î–æ–±–∞–≤–∏—Ç—å –ø–æ –≥—Ä–∞—Ñ–∏–∫—É ---", callback_data="noop")])
    if not unplanned_scheduled:
        kb.append([InlineKeyboardButton("(–≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã)", callback_data="noop")])
    else:
        for supplier in unplanned_scheduled:
            kb.append([InlineKeyboardButton(f"‚ûï {supplier}", callback_data=f"plan_sup_{target_date_str}_{supplier}")])

    kb.append([InlineKeyboardButton("üìù –í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫", callback_data=f"plan_sup_{target_date_str}_other")])
    kb.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="suppliers_menu")])

    if query:
        await query.message.edit_text(
            header_text,
            reply_markup=InlineKeyboardMarkup(kb),
            parse_mode=ParseMode.HTML
        )
# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –î–í–ï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò ---

async def show_invoices_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω-—Å–ø–∏—Å–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
    """
    query = update.callback_query
    await query.answer()

    try:
        # –§–æ—Ä–º–∞—Ç: invoices_list_–î–ê–¢–ê
        # –∏–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: details_sup_–î–ê–¢–ê_–î–ê–¢–ê_–°–¢–ê–†–¢...
        parts = query.data.split('_')
        date_str = parts[2]
        date_obj = pdate(date_str)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
        context.user_data['invoices_back_context'] = query.data
    except (ValueError, IndexError):
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.")
        return

    all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)
    if all_invoices is None:
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.")
        return

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∏ –∏—Ö —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –∑–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
    day_invoices_with_index = [
        (i + 2, row) for i, row in enumerate(all_invoices)
        if len(row) > 0 and pdate(row[0]) == date_obj
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –≤–∏–¥–µ
    context.user_data['day_invoice_rows'] = [item[0] for item in day_invoices_with_index]
    
    msg = f"üì¶ <b>–ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ {date_str}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    kb = []
    if not day_invoices_with_index:
        msg = f"üì¶ <b>–ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ {date_str}</b>\n\n–ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        for i, (row_num, invoice_data) in enumerate(day_invoices_with_index):
            supplier = invoice_data[1] if len(invoice_data) > 1 else "N/A"
            to_pay = invoice_data[4] if len(invoice_data) > 4 else "0"
            pay_type = invoice_data[6] if len(invoice_data) > 6 else "N/A"
            btn_text = f"{i+1}. {supplier} - {to_pay}‚Ç¥ ({pay_type})"
            # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É
            kb.append([InlineKeyboardButton(btn_text, callback_data=f"view_single_invoice_{date_str}_{i}")])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ—Ä–Ω–µ—Ç –Ω–∞—Å –≤ —Ç–æ –º–µ–Ω—é, –æ—Ç–∫—É–¥–∞ –º—ã –ø—Ä–∏—à–ª–∏
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="suppliers_menu")])
    await query.message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))


# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def show_single_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ –û–î–ù–û–ô –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()

    try:
        parts = query.data.split('_')
        date_str, current_index = parts[3], int(parts[4])
    except (ValueError, IndexError):
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–º.")
        return

    day_invoice_rows_indices = context.user_data.get('day_invoice_rows', [])
    all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)

    if not day_invoice_rows_indices or all_invoices is None:
        await query.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —É—Å—Ç–∞—Ä–µ–ª–∏, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    total_invoices = len(day_invoice_rows_indices)
    current_index = max(0, min(current_index, total_invoices - 1))
    
    target_row_num = day_invoice_rows_indices[current_index]
    invoice_data = all_invoices[target_row_num - 2]

    # --- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ) ---
    supplier = invoice_data[1] if len(invoice_data) > 1 else "???"
    amount_income = float(invoice_data[2].replace(',', '.')) if len(invoice_data) > 2 and invoice_data[2] else 0
    writeoff = float(invoice_data[3].replace(',', '.')) if len(invoice_data) > 3 and invoice_data[3] else 0
    to_pay = float(invoice_data[4].replace(',', '.')) if len(invoice_data) > 4 and invoice_data[4] else 0
    markup_amount = float(invoice_data[5].replace(',', '.')) if len(invoice_data) > 5 and invoice_data[5] else 0
    pay_type = invoice_data[6] if len(invoice_data) > 6 else "???"
    due_date = invoice_data[9] if len(invoice_data) > 9 else ""
    comment = invoice_data[10] if len(invoice_data) > 10 else ""

    msg = f"üßæ <b>–î–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π ({current_index + 1}/{total_invoices})</b> –∑–∞ {date_str}\n\n"
    msg += f"<b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {supplier}\n"
    if writeoff > 0:
        msg += f"  ‚Ä¢ –°—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–∞: {amount_income:.2f}‚Ç¥\n"
        msg += f"  ‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç/—Å–ø–∏—Å–∞–Ω–∏–µ: {writeoff:.2f}‚Ç¥\n"
    msg += f"  ‚Ä¢ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {to_pay:.2f}‚Ç¥\n"
    msg += f"  ‚Ä¢ <b>–°—É–º–º–∞ –ø–æ—Å–ª–µ –Ω–∞—Ü–µ–Ω–∫–∏:</b> {markup_amount:.2f}‚Ç¥\n"
    msg += f"  ‚Ä¢ <b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> {pay_type}\n"
    if pay_type == "–î–æ–ª–≥" and due_date:
        msg += f"     <i>(–°—Ä–æ–∫ –ø–æ–≥–∞—à–µ–Ω–∏—è: {due_date})</i>\n"
    if comment:
        msg += f"  ‚Ä¢ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"

    # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" ---
    kb_nav = []
    if current_index > 0:
        kb_nav.append(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"view_single_invoice_{date_str}_{current_index - 1}"))
    if current_index < total_invoices - 1:
        kb_nav.append(InlineKeyboardButton("–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"view_single_invoice_{date_str}_{current_index + 1}"))
    
    kb = []
    if kb_nav: kb.append(kb_nav)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–≤–∞—è –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    kb.append([InlineKeyboardButton(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ({supplier})", callback_data=f"edit_invoice_start_{target_row_num}")])
    kb.append([InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö", callback_data=f"invoices_list_{date_str}")])
    
    await query.message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
    
# 2. –í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ
async def handle_planning_supplier_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: plan_sup_–î–ê–¢–ê_–ò–º—è–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ plan_sup_–î–ê–¢–ê_other
    parts = query.data.split('_', 3)
    target_date_str = parts[2]
    supplier_name = parts[3]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['planning'] = {
        'date': target_date_str
    }
    
    if supplier_name == "other":
        context.user_data['planning']['step'] = 'other_supplier_name'
        await query.message.edit_text(
            f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ {target_date_str}:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="planning")]])
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
        context.user_data['planning']['supplier'] = supplier_name
        context.user_data['planning']['step'] = 'amount'
        await query.message.edit_text(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É –¥–ª—è <b>{supplier_name}</b> –Ω–∞ {target_date_str} (–≤ –≥—Ä–∏–≤–Ω–∞—Ö):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="planning")]]),
            parse_mode=ParseMode.HTML
        )
        
async def handle_planning_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(',', '.'))
        context.user_data['planning']['amount'] = amount
        context.user_data['planning']['step'] = 'payment_type'
        
        kb = [
            [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="plan_pay_–ù–∞–ª–∏—á–Ω—ã–µ")],
            [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data="plan_pay_–ö–∞—Ä—Ç–∞")],
            [InlineKeyboardButton("üìÜ –î–æ–ª–≥", callback_data="plan_pay_–î–æ–ª–≥")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ (–∫ –≤—ã–±–æ—Ä—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)", callback_data="planning")]
        ]
        
        await update.message.reply_text(
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(kb)
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# 4. –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
async def handle_planning_pay_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    pay_type = query.data.split('_', 2)[2]
    
    planning_data = context.user_data['planning']
    supplier = planning_data['supplier']
    amount = planning_data['amount']
    user_name = update.effective_user.first_name
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
    target_date_str = planning_data['date']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    save_plan_fact(target_date_str, supplier, amount, pay_type, user_name)
    
    await query.message.edit_text(
        f"‚úÖ –ü–ª–∞–Ω –¥–ª—è <b>{supplier}</b> –Ω–∞ <b>{target_date_str}</b> –Ω–∞ —Å—É–º–º—É <b>{amount:.2f}‚Ç¥</b> ({pay_type}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "–•–æ—Ç–∏—Ç–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞?",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="planning")],
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", callback_data="suppliers_menu")],
        ])
    )
    context.user_data.pop('planning', None)
    
# --- –ü–ï–†–ï–£–ß–ï–¢ ---


async def start_revision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—É—á–µ—Ç–∞."""
    query = update.callback_query
    await query.answer()

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –Ω–∞—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    calculated_balance = get_inventory_balance()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['revision'] = {
        'step': 'actual_amount',
        'calculated': calculated_balance
    }
    
    msg = (f"üßÆ <b>–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ—É—á–µ—Ç–∞</b>\n\n"
           f"–†–∞—Å—á–µ—Ç–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: <b>{calculated_balance:.2f}‚Ç¥</b>\n\n"
           f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–¥—Å—á–µ—Ç–∞):")

    await query.message.edit_text(msg, parse_mode=ParseMode.HTML)


async def handle_revision_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    try:
        actual_amount = float(update.message.text.replace(',', '.'))
        context.user_data['revision']['actual'] = actual_amount
        context.user_data['revision']['step'] = 'comment'
        
        await update.message.reply_text("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ—É—á–µ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ—É—á–µ—Ç –∑–∞ –∏—é–Ω—å'):")

    except (ValueError, KeyError):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        return


async def save_revision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ—É—á–µ—Ç–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥."""
    comment = update.message.text
    revision_data = context.user_data.get('revision', {})
    
    calculated = revision_data.get('calculated')
    actual = revision_data.get('actual')
    user = update.effective_user.first_name
    
    if calculated is None or actual is None:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        context.user_data.pop('revision', None)
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
    add_revision(calculated, actual, comment, user)
    
    difference = actual - calculated
    diff_text = f"–ò–∑–ª–∏—à–µ–∫: +{difference:.2f}‚Ç¥" if difference > 0 else f"–ù–µ–¥–æ—Å—Ç–∞—á–∞: {difference:.2f}‚Ç¥"
    if abs(difference) < 0.01:
        diff_text = "–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç"

    msg = (f"‚úÖ <b>–ü–µ—Ä–µ—É—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
           f"<b>–†–∞—Å—á–µ—Ç–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫:</b> {calculated:.2f}‚Ç¥\n"
           f"<b>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫:</b> {actual:.2f}‚Ç¥\n"
           f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {diff_text}\n\n"
           f"<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}</i>")

    kb = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]]
    
    await update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
    context.user_data.pop('revision', None)
    


async def show_invoice_edit_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π '–ë—ã–ª–æ/–°—Ç–∞–Ω–µ—Ç'."""
    query = update.callback_query
    message = query.message if query else update.message
    
    if query:
        await query.answer()

    edit_state = context.user_data.get('edit_invoice', {})
    row_index = edit_state.get('row_index')
    new_values = edit_state.get('new_values')

    if not row_index or not new_values:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–µ—Ä—è–Ω—ã.")
        return

    all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)
    old_data_row = all_invoices[row_index - 2]
    
    field_names = {
        'amount_income': "–°—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–∞", 'writeoff': "–í–æ–∑–≤—Ä–∞—Ç/—Å–ø–∏—Å–∞–Ω–∏–µ",
        'markup_amount': "–°—É–º–º–∞ –ø–æ—Å–ª–µ –Ω–∞—Ü–µ–Ω–∫–∏", 'pay_type': "–¢–∏–ø –æ–ø–ª–∞—Ç—ã",
        'due_date': "–î–∞—Ç–∞ –¥–æ–ª–≥–∞", 'comment': "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    }
    column_map = {'amount_income': 2, 'writeoff': 3, 'markup_amount': 5, 'pay_type': 6, 'due_date': 9, 'comment': 10}

    msg = "<b>‚ùóÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
    for field, new_value in new_values.items():
        col_index = column_map.get(field)
        old_value = old_data_row[col_index] if len(old_data_row) > col_index else ""
        msg += f"\n<u>{field_names.get(field, field)}</u>:\n"
        msg += f"  ‚Ä¢ –ë—ã–ª–æ: <code>{old_value}</code>\n"
        msg += f"  ‚Ä¢ –°—Ç–∞–Ω–µ—Ç: <b>{new_value}</b>"

    kb = [[
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"execute_invoice_edit_{row_index}"),
        InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"edit_invoice_cancel_{row_index}")
    ]]
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if query:
        await message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
    else:
        await message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
        
async def view_current_debts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    page = int(context.user_data.get('current_debts_page', 0))
    ws = GSHEET.worksheet(SHEET_DEBTS)
    rows = ws.get_all_values()[1:]
    debts = [row for row in rows if len(row) >= 7 and row[6].strip().lower() != "–¥–∞"]

    per_page = 7
    total_pages = max(1, math.ceil(len(debts) / per_page))
    start = page * per_page
    end = start + per_page
    page_debts = debts[start:end] # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ä–µ–∑

    if not page_debts:
        await query.message.edit_text("üéâ –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–æ–ª–≥–æ–≤!", reply_markup=debts_menu_kb())
        return

    response = "<b>üìã –¢–µ–∫—É—â–∏–µ –¥–æ–ª–≥–∏:</b>\n\n"
    # –ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ü–∏–∫–ª
    for i, row in enumerate(page_debts): # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ page_debts
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Å–º–µ—â–µ–Ω —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        display_idx = start + i + 1
        status = "‚úÖ" if row[6].strip().lower() == "–¥–∞" else "üü†"
        response += (
            f"<b>#{display_idx} {status} {row[1]}</b>\n"
            f"    ‚Ä¢ –î–∞—Ç–∞: {row[0]}\n"
            f"    ‚Ä¢ –°—É–º–º–∞: <b>{parse_float(row[2]):.2f}‚Ç¥</b>\n"
            f"    ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: <b>{parse_float(row[4]):.2f}‚Ç¥</b>\n"
            f"    ‚Ä¢ –°—Ä–æ–∫: {row[5]}\n"
            f"    ‚Ä¢ –°—Ç–∞—Ç—É—Å: {row[6]}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    kb = []
    if page > 0:
        kb.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="current_debts_prev"))
    if page < total_pages - 1:
        kb.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="current_debts_next"))
    kb = [kb] if kb else []
    kb.append([InlineKeyboardButton("üîô –î–æ–ª–≥–∏", callback_data="debts_menu")])

    await query.message.edit_text(response, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
    context.user_data['current_debts_page'] = page


def get_week_debts(start, end):
    ws = GSHEET.worksheet(SHEET_DEBTS)
    rows = ws.get_all_values()[1:]
    debts = []
    for row in rows:
        if len(row) < 7:
            continue
        try:
            d = pdate(row[0])
        except Exception:
            continue
        if start <= d <= end:
            debts.append(row)
    return debts

def week_buttons_for_debts(start, end):
    prev = start - dt.timedelta(days=7)
    next = start + dt.timedelta(days=7)
    curr_start, curr_end = week_range()
    return [
        [
            InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f"debts_week_{sdate(prev)}_{sdate(prev + dt.timedelta(days=6))}"),
            InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data=f"debts_week_{sdate(curr_start)}_{sdate(curr_end)}"),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚ñ∂Ô∏è", callback_data=f"debts_week_{sdate(next)}_{sdate(next + dt.timedelta(days=6))}")
        ],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –¥–æ–ª–≥–∞", callback_data="debts_search")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debts_menu")]
    ]

async def show_debts_history(update: Update, context: ContextTypes.DEFAULT_TYPE, start=None, end=None):
    query = update.callback_query
    await query.answer()

    if not start or not end:
        start, end = week_range()

    debts = get_week_debts(start, end)
    text = f"<b>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤ –∑–∞ {sdate(start)} ‚Äî {sdate(end)}:</b>\n\n"
    if not debts:
        text += "–ù–µ—Ç –¥–æ–ª–≥–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥."
    else:
        for i, row in enumerate(debts):
            try:
                # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
                amount = parse_float(row[2])
                paid = parse_float(row[3])
            except ValueError:
                amount = 0.0
                paid = 0.0
            
            status = "‚úÖ –ó–∞–∫—Ä—ã—Ç" if row[6].strip().lower() == "–¥–∞" else "‚ùå –û—Ç–∫—Ä—ã—Ç"
            history = row[7] if len(row) > 7 else ""
            text += (f"{i+1}. <b>{row[1]}</b> | {row[0]} | {amount:.2f}‚Ç¥ | {status}\n"
                     f"   –û–ø–ª–∞—á–µ–Ω–æ: {paid:.2f}‚Ç¥ | –°—Ä–æ–∫: {row[5]}\n")
            if history:
                hist_lines = history.replace(';', '\n     ‚Ä¢').strip()
                text += f"   –ò—Å—Ç–æ—Ä–∏—è: \n     ‚Ä¢{hist_lines}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    kb = week_buttons_for_debts(start, end)
    await query.message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))


# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
def add_revision(calc_sum, fact_sum, comment, user):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ—É—á–µ—Ç–µ –≤ –ª–∏—Å—Ç "–ü–µ—Ä–µ—É—á–µ—Ç—ã" –∏ –ö–û–†–†–ï–ö–¢–ù–û
    –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –≤ –ª–∏—Å—Ç–µ "–û—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞".
    """
    # 1. –ó–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤ –ø–µ—Ä–µ—É—á–µ—Ç–æ–≤ - —ç—Ç–∞ —á–∞—Å—Ç—å —É –≤–∞—Å —Ä–∞–±–æ—Ç–∞–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
    ws_revisions = GSHEET.worksheet("–ü–µ—Ä–µ—É—á–µ—Ç—ã")
    diff = fact_sum - calc_sum
    ws_revisions.append_row([sdate(), calc_sum, fact_sum, diff, comment, user])
    
    # 2. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≤ "–û—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞" - –∑–¥–µ—Å—å –±—ã–ª–∞ –æ—à–∏–±–∫–∞.
    ws_inv = GSHEET.worksheet("–û—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞")
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –≤ —Å—Ç–æ–ª–±—Ü–µ "–°—É–º–º–∞" (—Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü)
    # –º—ã –ù–ï –ø–∏—à–µ–º —Å—Ç–∞—Ä—ã–π –æ—Å—Ç–∞—Ç–æ–∫, –∞ –≤ —Å—Ç–æ–ª–±—Ü–µ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" (—á–µ—Ç–≤–µ—Ä—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü)
    # –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—É–º–º—É, –∫–∞–∫ –≤—ã –∏ –ø—Ä–æ—Å–∏–ª–∏.
    # –≠—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –¥–æ fact_sum.
    
    # --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ "–ü–µ—Ä–µ—É—á–µ—Ç" –≥–æ–≤–æ—Ä–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_inventory_balance,
    # —á—Ç–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å —Å—É–º–º—É –∏–∑ 4-–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–µ –∫–∞–∫ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.
    # –ü–æ—ç—Ç–æ–º—É 3-–π —Å—Ç–æ–ª–±–µ—Ü (—Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏) –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º.
    # –í 4-–π —Å—Ç–æ–ª–±–µ—Ü (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π) –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—É–º–º—É –¥–ª—è get_inventory_balance.
    # –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ—É—á–µ—Ç—É –±—É–¥–µ—Ç –≤ –ª–∏—Å—Ç–µ "–ü–µ—Ä–µ—É—á–µ—Ç—ã".
    
    # –ú—ã —Å–¥–µ–ª–∞–µ–º –µ—â–µ –ª—É—á—à–µ: –∑–∞–ø–∏—à–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—É–º–º—É –≤ —Å—Ç–æ–ª–±–µ—Ü "–°—É–º–º–∞",
    # –∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –ø–æ—è—Å–Ω–µ–Ω–∏–µ. –ò –æ–±–Ω–æ–≤–∏–º get_inventory_balance.
    ws_inv.append_row([sdate(), "–ü–µ—Ä–µ—É—á–µ—Ç", fact_sum, f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {fact_sum}", user])
def is_date(string):
    try:
        dt.datetime.strptime(string, "%d.%m.%Y")
        return True
    except:
        return False
    
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
def stock_safe_kb(is_admin=False):
    kb = [
        [InlineKeyboardButton("üì¶ –û—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞", callback_data="inventory_balance")],
        [InlineKeyboardButton("üíµ –û—Å—Ç–∞—Ç–æ–∫ –≤ —Å–µ–π—Ñ–µ", callback_data="safe_balance")],
        # –†–∞–∑–º–µ—â–∞–µ–º –æ–±–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        [
            InlineKeyboardButton("üßæ –ò—Å—Ç–æ—Ä–∏—è –æ—Å—Ç–∞—Ç–∫–∞", callback_data="inventory_history"),
            InlineKeyboardButton("üßæ –ò—Å—Ç–æ—Ä–∏—è —Å–µ–π—Ñ–∞", callback_data="safe_history")
        ],
        [
            InlineKeyboardButton("‚ûï –ü–æ–ª–æ–∂–∏—Ç—å –≤ —Å–µ–π—Ñ", callback_data="safe_deposit"),
            InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –∏–∑ —Å–µ–π—Ñ–∞", callback_data="safe_withdraw")
        ],
        [InlineKeyboardButton("‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ —Å –æ—Å—Ç–∞—Ç–∫–∞", callback_data="add_inventory_expense")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(kb)

def get_tomorrow_debts():
    ws = GSHEET.worksheet(SHEET_DEBTS)
    rows = ws.get_all_values()[1:]
    tomorrow = (dt.date.today() + dt.timedelta(days=1)).strftime(DATE_FMT)
    total = 0
    suppliers = []
    for row in rows:
        if len(row) >= 6 and row[5] != "–î–∞" and row[4]:  # –ù–µ –ø–æ–≥–∞—à–µ–Ω
            # row[5] ‚Äî —Å—Ä–æ–∫
            if row[5] == tomorrow:
                amount = parse_float(row[4])
                total += amount
                suppliers.append((row[1], amount))
    return total, suppliers


# --- FAQ ---
FAQ = [
    ("üìù –ö–∞–∫ —Å–¥–∞—Ç—å —Å–º–µ–Ω—É?", "–ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –ù–æ–≤—ã–π –æ—Ç—á—ë—Ç¬ª, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—É–º–º—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã, —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º."),
    ("üí∏ –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥?", "–í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ ¬´üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥¬ª, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."),
    ("üì¶ –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞?", "–í—ã–±–µ—Ä–∏—Ç–µ ¬´üì¶ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º. –î–ª—è –æ—Ç—Å—Ä–æ—á–µ–∫ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É."),
    ("üìÜ –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–º–µ–Ω—ã?", "–í—ã–±–µ—Ä–∏—Ç–µ ¬´üóì –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω¬ª."),
    ("‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?", "–ü–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚Äî –ù–∞—Ç–∞–ª–∏—è –∏–ª–∏ –ñ–µ–Ω—è.")
]

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def main_kb(is_admin=False):
    kb = [
        [InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞ —Å –æ—Å—Ç–∞—Ç–∫–æ–º –∏ —Å–µ–π—Ñ–æ–º", callback_data="stock_safe_menu")],
        [InlineKeyboardButton("üìä –§–∏–Ω–∞–Ω—Å—ã", callback_data="finance_menu")],
        [InlineKeyboardButton("üë• –ü–µ—Ä—Å–æ–Ω–∞–ª", callback_data="staff_menu")],
        [InlineKeyboardButton("üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", callback_data="suppliers_menu"),
         InlineKeyboardButton("üè¶ –î–æ–ª–≥–∏", callback_data="debts_menu")],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_menu")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")]
    ]
    if is_admin:
        kb.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    kb.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])
    return InlineKeyboardMarkup(kb)

def finance_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –°–¥–∞—Ç—å —Å–º–µ–Ω—É", callback_data="add_report")],
        [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–æ–≤", callback_data="view_reports_menu")],
        [InlineKeyboardButton("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data="daily_summary")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def reports_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_today")],
        [InlineKeyboardButton("üìÖ –ó–∞ –≤—á–µ—Ä–∞", callback_data="report_yesterday")],
        [InlineKeyboardButton("üóì –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_week_current")],
        [InlineKeyboardButton("üìÜ –ó–∞ –º–µ—Å—è—Ü", callback_data="report_month_current")],
        [InlineKeyboardButton("üìÜ –ó–∞ –≥–æ–¥", callback_data="report_year")],
        [InlineKeyboardButton("üìÜ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="report_custom")],
        [InlineKeyboardButton("üîô –§–∏–Ω–∞–Ω—Å—ã", callback_data="finance_menu")]
    ])

def staff_menu_kb(is_admin=False):
    kb = [[InlineKeyboardButton("üóì –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω", callback_data="view_shifts")]]
    if is_admin:
        kb.append([InlineKeyboardButton("‚úèÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—É", callback_data="edit_shifts")])
        kb.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", callback_data="seller_stats")])
    kb.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(kb)

def suppliers_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é", callback_data="add_supplier")],
        [InlineKeyboardButton("üöö –ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–±—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–æ–≤", callback_data="view_suppliers")],
        [InlineKeyboardButton("üìÑ –ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="view_today_invoices")],
        # --- –í–û–ó–í–†–ê–©–ê–ï–ú –ö–ù–û–ü–ö–£ –ù–ê –ú–ï–°–¢–û ---
        [InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="planning")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])


def debts_menu_kb():
    return InlineKeyboardMarkup([
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É 0 –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        [InlineKeyboardButton("üìã –¢–µ–∫—É—â–∏–µ –¥–æ–ª–≥–∏", callback_data="current_debts_0")],
        [InlineKeyboardButton("üìÜ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏", callback_data="upcoming_payments")],
        [InlineKeyboardButton("‚úÖ –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥", callback_data="close_debt")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤", callback_data="debts_history_0")],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –¥–æ–ª–≥–æ–≤", callback_data="search_debts")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def analytics_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìà –ü—Ä–æ–¥–∞–∂–∏", callback_data="sales_analytics")],
        [InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥—ã", callback_data="expenses_analytics")],
        [InlineKeyboardButton("üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", callback_data="suppliers_analytics")],
        [InlineKeyboardButton("üë• –ü—Ä–æ–¥–∞–≤—Ü—ã", callback_data="sellers_analytics")],
        [InlineKeyboardButton("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç", callback_data="financial_report")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def settings_menu_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_settings")],
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings")],
        [InlineKeyboardButton("üì± –í–Ω–µ—à–Ω–∏–π –≤–∏–¥", callback_data="ui_settings")],
        [InlineKeyboardButton("üîë –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="security_settings")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def admin_panel_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="financial_analysis")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º", callback_data="staff_management")],
        [InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="system_settings")],
        [InlineKeyboardButton("üìã –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π", callback_data="action_log")],
        [InlineKeyboardButton("üßÆ –ü–µ—Ä–µ—É—á—ë—Ç", callback_data="admin_revision")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def back_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])


def cancel_kb():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]])

def faq_kb():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(q, callback_data=f"faq_{i}")] for i, (q, _) in enumerate(FAQ)] + 
        [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    is_admin = str(user.id) in ADMINS
    push_nav(context, "main_menu")  # <-- –í–∞–∂–Ω–æ!
    await update.message.reply_text(
        f"üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        "üìä –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:",
        reply_markup=main_kb(is_admin)
    )
    log_action(user, user.first_name, "–°—Ç–∞—Ä—Ç")

async def start_inventory_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['inventory_expense'] = {'step': 'amount'}
    await update.callback_query.message.edit_text(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=back_kb()
    )

async def handle_inventory_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(',', '.'))
        context.user_data['inventory_expense']['amount'] = amount
        context.user_data['inventory_expense']['step'] = 'comment'
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–ø–∏—Å–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä—á–∞, –≤–æ–∑–≤—Ä–∞—Ç, –ø–æ–¥–∞—Ä–æ–∫):",
            reply_markup=back_kb()
        )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")

async def save_inventory_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    amount = context.user_data['inventory_expense']['amount']
    user = update.effective_user.first_name
    add_inventory_operation("–°–ø–∏—Å–∞–Ω–∏–µ", amount, comment, user)
    await update.message.reply_text(f"‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ {amount:.2f}‚Ç¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    context.user_data.pop('inventory_expense', None)


# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    is_admin = str(query.from_user.id) in ADMINS
    # –£–±–∏—Ä–∞–µ–º query.answer(), —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ handle_callback
    await query.message.edit_text(
        "üè™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_kb(is_admin)
    )

async def close_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.delete()
    await query.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")

# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def show_planned_arrivals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–∞ –°–ï–ì–û–î–ù–Ø –∏ –Ω–∞ –ó–ê–í–¢–†–ê."""
    query = update.callback_query
    await query.answer()

    today = dt.date.today()
    tomorrow = today + dt.timedelta(days=1)

    try:
        ws = GSHEET.worksheet(SHEET_PLAN_FACT)
        rows = ws.get_all_values()[1:]
    except Exception as e:
        await query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç –ø–ª–∞–Ω–æ–≤: {e}")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (i+2, —Ç.–∫. –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    today_arrivals = [row + [i+2] for i, row in enumerate(rows) if row and pdate(row[0]) == today]
    tomorrow_plans = [row + [i+2] for i, row in enumerate(rows) if row and pdate(row[0]) == tomorrow]
    
    msg = "<b>üöö –ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–±—ã—Ç–∏—è –∏ –ø–ª–∞–Ω–æ–≤</b>\n"
    kb = []

    # --- –ë–ª–æ–∫ –Ω–∞ –°–ï–ì–û–î–ù–Ø (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π) ---
    msg += f"\n<b><u>–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({sdate(today)}):</u></b>\n"
    if not today_arrivals:
        msg += "<i>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–±—ã—Ç–∏–π.</i>\n"
    else:
        for arrival in today_arrivals:
            # arrival -> ['–¥–∞—Ç–∞', '–ø–æ—Å—Ç–∞–≤—â–∏–∫', '—Å—É–º–º–∞', '—Ç–∏–ø', '–∫—Ç–æ', '—Å—Ç–∞—Ç—É—Å', '–Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏']
            status_icon = "‚úÖ" if len(arrival) > 5 and arrival[5] == "–ü—Ä–∏–±—ã–ª" else "üõë"
            supplier, amount, pay_type, row_num = arrival[1], arrival[2], arrival[3], arrival[6]
            pay_type_human = "–ù–∞–ª–∏—á–Ω—ã–µ" if '–Ω–∞–ª–∏—á' in pay_type.lower() else "–ö–∞—Ä—Ç–∞" if '–∫–∞—Ä—Ç' in pay_type.lower() else "–î–æ–ª–≥"
            button_text = f"{status_icon} {supplier} - {amount}‚Ç¥ ({pay_type_human})"
            kb.append([InlineKeyboardButton(button_text, callback_data=f"toggle_arrival_{row_num}")])

    # --- –ë–ª–æ–∫ –Ω–∞ –ó–ê–í–¢–†–ê (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π) ---
    msg += f"\n<b><u>–ü–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({sdate(tomorrow)}):</u></b>\n"
    if not tomorrow_plans:
        msg += "<i>–ü–ª–∞–Ω–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –µ—â–µ –Ω–µ—Ç.</i>\n"
    else:
        for plan in tomorrow_plans:
            supplier, amount, pay_type, row_num = plan[1], plan[2], plan[3], plan[6]
            pay_type_human = "–ù–∞–ª–∏—á–Ω—ã–µ" if '–Ω–∞–ª–∏—á' in pay_type.lower() else "–ö–∞—Ä—Ç–∞" if '–∫–∞—Ä—Ç' in pay_type.lower() else "–î–æ–ª–≥"
            button_text = f"‚úèÔ∏è {supplier} - {amount}‚Ç¥ ({pay_type_human})"
            kb.append([InlineKeyboardButton(button_text, callback_data=f"edit_plan_{row_num}")])

    kb.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", callback_data="suppliers_menu")])
    
    try:
        await query.message.edit_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
    except BadRequest as e:
        if "Message is not modified" in str(e):
            await query.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=False)
        else:
            raise e
        
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –§–£–ù–ö–¶–ò–Æ show_planned_arrivals –ù–ê –≠–¢–£ ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –§–£–ù–ö–¶–ò–Æ show_arrivals_journal –ù–ê –≠–¢–£ ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def show_arrivals_journal(update: Update, context: ContextTypes.DEFAULT_TYPE, target_date: dt.date = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π, –∫—Ä–∞—Å–∏–≤—ã–π –∏ —É—Å—Ç–æ–π—á–∏–≤—ã–π –∂—É—Ä–Ω–∞–ª –ø—Ä–∏–±—ã—Ç–∏—è (–ü–ª–∞–Ω/–§–∞–∫—Ç)."""
    query = update.callback_query
    if query:
        await query.answer()

    today = dt.date.today()
    if target_date is None:
        target_date = today

    target_date_str = sdate(target_date)
    day_of_week_name = DAYS_OF_WEEK_RU[target_date.weekday()]

    # –ü–µ—Ä–∏–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    days_until_next_sunday = (6 - today.weekday()) + 7
    end_of_viewing_period = today + dt.timedelta(days=days_until_next_sunday)

    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
    try:
        all_plans = get_cached_sheet_data(context, SHEET_PLAN_FACT, force_update=True) or []
        all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS, force_update=True) or []
    except Exception as e:
        await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
        
    plans_for_day = [row for row in all_plans if row and row[0] == target_date_str]
    invoices_for_day = [row for row in all_invoices if row and row[0] == target_date_str]
    
    # --- –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    msg_parts = [f"<b>üöö –ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ {day_of_week_name.upper()}, {target_date_str}</b>"]

    # --- –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–∫–∏ ---
    suppliers_status = defaultdict(lambda: {
        'plan_amount': 0, 'plan_type': '-', 
        'fact_amount': 0, 'fact_types': set()
    })

    for plan in plans_for_day:
        supplier, amount, p_type = plan[1], parse_float(plan[2]), plan[3]
        suppliers_status[supplier]['plan_amount'] += amount
        suppliers_status[supplier]['plan_type'] = p_type

    for invoice in invoices_for_day:
        supplier, to_pay, pay_type = invoice[1], parse_float(invoice[4]), invoice[6]
        suppliers_status[supplier]['fact_amount'] += to_pay
        suppliers_status[supplier]['fact_types'].add(pay_type)

    if not suppliers_status:
        msg_parts.append("\n<i>–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –Ω–∏ –ø–ª–∞–Ω–æ–≤, –Ω–∏ —Ñ–∞–∫—Ç–æ–≤.</i>")
    else:
        for supplier, data in sorted(suppliers_status.items()):
            status_icon = "‚úÖ" if data['fact_amount'] > 0 else "‚åõÔ∏è"
            
            plan_amount_str = f"{data['plan_amount']:.2f}‚Ç¥"
            fact_amount_str = f"{data['fact_amount']:.2f}‚Ç¥"
            
            plan_type_str = data['plan_type']
            fact_type_str = ", ".join(sorted(list(data['fact_types']))) or "-"

            supplier_block = (
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"{status_icon} <b>{supplier}</b>\n"
                f"    ‚Ä¢ <b>–ü–ª–∞–Ω:</b> {plan_amount_str} <i>({plan_type_str})</i>\n"
                f"    ‚Ä¢ <b>–§–∞–∫—Ç:</b> {fact_amount_str} <i>({fact_type_str})</i>"
            )
            msg_parts.append(supplier_block)

    # --- –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
    kb = []
    nav_row = []
    prev_day = target_date - dt.timedelta(days=1)
    # –û–≥—Ä–∞–Ω–∏—á–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –Ω–µ —É—Ö–æ–¥–∏—Ç—å –≤ –¥–∞–ª–µ–∫–æ–µ –ø—Ä–æ—à–ª–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –¥–Ω–µ–π)
    if (today - prev_day).days < 30:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"journal_nav_{sdate(prev_day)}"))
    
    nav_row.append(InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"journal_nav_{sdate(today)}"))
    
    next_day = target_date + dt.timedelta(days=1)
    if next_day <= end_of_viewing_period:
        nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"journal_nav_{sdate(next_day)}"))
    
    kb.append(nav_row)
    kb.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", callback_data="suppliers_menu")])

    final_msg = "\n".join(msg_parts)
    if query:
        await query.message.edit_text(final_msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
        

async def toggle_arrival_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–±—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞."""
    query = update.callback_query
    
    try:
        row_num = int(query.data.split('_')[2])
        ws = GSHEET.worksheet(SHEET_PLAN_FACT)
        current_status = ws.cell(row_num, 6).value
        new_status = "–ü—Ä–∏–±—ã–ª" if current_status != "–ü—Ä–∏–±—ã–ª" else "–û–∂–∏–¥–∞–µ—Ç—Å—è"
        ws.update_cell(row_num, 6, new_status)
        await query.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", show_alert=True)
        return
        
    await show_arrivals_journal(update, context)

async def edit_plan_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞."""
    query = update.callback_query
    await query.answer()
    row_num = int(query.data.split('_')[2])
    context.user_data['edit_plan'] = {'row': row_num}

    kb = [
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data=f"edit_plan_field_amount")],
        [InlineKeyboardButton("üí≥ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç—ã", callback_data=f"edit_plan_field_pay_type")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∂—É—Ä–Ω–∞–ª", callback_data="view_suppliers")],
    ]
    await query.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —ç—Ç–æ–º –ø–ª–∞–Ω–µ?", reply_markup=InlineKeyboardMarkup(kb))

async def edit_plan_choose_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è."""
    query = update.callback_query
    await query.answer()
    field = query.data.split('_')[-1]
    context.user_data['edit_plan']['field'] = field

    if field == 'amount':
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:")
    elif field == 'pay_type':
        kb = [
            [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="edit_plan_value_–ù–∞–ª–∏—á–Ω—ã–µ")],
            [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data="edit_plan_value_–ö–∞—Ä—Ç–∞")],
            [InlineKeyboardButton("üìÜ –î–æ–ª–≥", callback_data="edit_plan_value_–î–æ–ª–≥")],
        ]
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(kb))


async def edit_plan_save_value(update: Update, context: ContextTypes.DEFAULT_TYPE, new_value=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞."""
    query = update.callback_query
    from_button = bool(query)

    if from_button:
        await query.answer()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data –∫–Ω–æ–ø–∫–∏
        new_value = query.data.split('_')[-1]
    
    edit_data = context.user_data.get('edit_plan', {})
    row_num = edit_data.get('row')
    field = edit_data.get('field')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    if not all([row_num, field, new_value is not None]):
        error_text = "–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        if from_button: await query.answer(error_text, show_alert=True)
        else: await update.message.reply_text(error_text)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
    success = update_plan_in_sheet(row_num, field, new_value)

    if success:
        success_text = "‚úÖ –ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!"
        if from_button: await query.answer(success_text)
        else: await update.message.reply_text(success_text)
    else:
        error_text = "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ."
        if from_button: await query.answer(error_text, show_alert=True)
        else: await update.message.reply_text(error_text)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª
    context.user_data.pop('edit_plan', None)
    await show_arrivals_journal(update, context)

# --- –ú–ï–ù–Æ –†–ê–ó–î–ï–õ–û–í ---
async def finance_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    push_nav(context, "finance_menu")
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=finance_menu_kb())
    
async def staff_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    is_admin = str(query.from_user.id) in ADMINS
    await query.message.edit_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=staff_menu_kb(is_admin))
    
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def suppliers_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
    is_admin = str(query.from_user.id) in ADMINS
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π callback_data
    today_str = sdate()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    kb = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é", callback_data="add_supplier")],
        [InlineKeyboardButton("üöö –ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–±—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–æ–≤", callback_data="view_suppliers")],
        [InlineKeyboardButton("üìÑ –ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"invoices_list_{today_str}")],
        [InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="planning")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.message.edit_text(
        "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    
async def debts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    push_nav(context, "debts_menu")  # <---
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üè¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=debts_menu_kb())
    
async def analytics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    push_nav(context, "analytics_menu")  # <--
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=analytics_menu_kb())
    
async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    push_nav(context, "settings_menu")  # <-
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=settings_menu_kb())

async def stock_safe_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    push_nav(context, "stock_safe_menu")
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üíº –†–∞–±–æ—Ç–∞ —Å –æ—Å—Ç–∞—Ç–∫–æ–º –∏ —Å–µ–π—Ñ–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=stock_safe_kb(str(query.from_user.id) in ADMINS)
    )

    
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if str(query.from_user.id) not in ADMINS:
        await query.answer("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    # –£–±–∏—Ä–∞–µ–º query.answer()
    await query.message.edit_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_panel_kb())

# --- –û–¢–ß–ï–¢–´ ---
async def view_reports_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=reports_menu_kb())

# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–í–ï –§–£–ù–ö–¶–ò–ò ---

async def get_report_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    start, end = week_range()
    # –ü–µ—Ä–µ–¥–∞–µ–º context –≤ show_report
    await show_report(update, context, start, end)

async def get_report_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    start, end = month_range()
    # –ü–µ—Ä–µ–¥–∞–µ–º context –≤ show_report
    await show_report(update, context, start, end)

async def get_report_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    today = dt.date.today()
    start = dt.date(today.year, 1, 1)
    end = dt.date(today.year, 12, 31)
    await show_report(update, start, end)

async def get_report_custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['report_period'] = {'step': 'start_date'}
    await query.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=cancel_kb()
    )

async def handle_report_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        start_date = pdate(update.message.text)
        context.user_data['report_period']['start_date'] = start_date
        context.user_data['report_period']['step'] = 'end_date'
        await update.message.reply_text(
            f"üìÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {sdate(start_date)}\n\n"
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
            reply_markup=cancel_kb()
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

async def handle_report_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        end_date = pdate(update.message.text)
        start_date = context.user_data['report_period']['start_date']
        if end_date < start_date:
            await update.message.reply_text("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π")
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º 'context' –≤ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        await show_report(update, context, start_date, end_date)
        
        context.user_data.pop('report_period', None)
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        
        
# --- –û–¢–ß–ï–¢ –û –°–ú–ï–ù–ï ---
async def start_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    kb = [[InlineKeyboardButton(seller, callback_data=f"report_seller_{seller}")] for seller in SELLERS]
    kb.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="finance_menu")])
    await query.message.edit_text(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞:",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def handle_report_seller(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    seller = query.data.split('_')[2]
    context.user_data['report'] = {'seller': seller, 'step': 'cash'}
    await query.message.edit_text(
        f"üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö –∑–∞ —Å–º–µ–Ω—É (–≤ –≥—Ä–∏–≤–Ω–∞—Ö):",
        reply_markup=InlineKeyboardMarkup([  # <-- –ó–∞–º–µ–Ω–∏—Ç—å back_kb() –Ω–∞ —ç—Ç–æ
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_report")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_report")]
         ])
    )

# --- –î–û–ë–ê–í–¨–¢–ï –í–ï–°–¨ –≠–¢–û–¢ –ë–õ–û–ö –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ---

# --- –õ–û–ì–ò–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ú–ï–ù–ê–ú–ò ---

def generate_calendar_keyboard(year: int, month: int, shifts_data: dict, mode: str = 'view'):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤."""
    # –°–ª–æ–≤–∞—Ä—å —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—è—Ü–µ–≤
    RU_MONTHS = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
        7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }
    
    kb = []
    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    month_name = f"{RU_MONTHS.get(month, '')} {year}"
    nav_row = [
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"shift_nav_{year}_{month-1}" if month > 1 else f"shift_nav_{year-1}_12"),
        InlineKeyboardButton(month_name, callback_data="noop"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"shift_nav_{year}_{month+1}" if month < 12 else f"shift_nav_{year+1}_1")
    ]
    kb.append(nav_row)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    kb.append([InlineKeyboardButton(day, callback_data="noop") for day in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]])

    # –î–∞—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="noop"))
            else:
                date_str = f"{day:02d}.{month:02d}.{year}"
                sellers_on_day = shifts_data.get(date_str, [])
                
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –Ω–∞ –∫–Ω–æ–ø–∫—É ---
                if sellers_on_day:
                    initials = "".join([s[0] for s in sellers_on_day])
                    btn_text = f"{day}‚úÖ"
                else:
                    btn_text = str(day)
                
                callback = f"edit_shift_{date_str}" if mode == 'edit' else f"view_shift_{date_str}"
                row.append(InlineKeyboardButton(btn_text, callback_data=callback))
        kb.append(row)
        
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="staff_menu")])
    return InlineKeyboardMarkup(kb)

# --- –î–û–ë–ê–í–¨–¢–ï –í–ï–°–¨ –≠–¢–û–¢ –ë–õ–û–ö –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ---

def get_seller_stats_data(context: ContextTypes.DEFAULT_TYPE, seller_name: str, days_period: int = 30):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    today = dt.date.today()
    start_date = today - dt.timedelta(days=days_period)
    
    reports = get_cached_sheet_data(context, SHEET_REPORT)
    if not reports:
        return None

    seller_reports = [row for row in reports if len(row) > 4 and row[1] == seller_name and pdate(row[0]) and start_date <= pdate(row[0]) <= today]
    
    if not seller_reports:
        return {'total_sales': 0, 'shift_count': 0, 'avg_sales': 0, 'sales_by_dow': defaultdict(float), 'days_worked': []}

    total_sales = 0
    sales_by_dow = defaultdict(float)
    days_worked = []
    
    for report in seller_reports:
        sales = float(report[4].replace(',', '.'))
        report_date = pdate(report[0])
        
        total_sales += sales
        dow_name = DAYS_OF_WEEK_RU[report_date.weekday()]
        sales_by_dow[dow_name] += sales
        days_worked.append(report_date)

    shift_count = len(seller_reports)
    avg_sales = total_sales / shift_count if shift_count > 0 else 0

    return {
        'total_sales': total_sales,
        'shift_count': shift_count,
        'avg_sales': avg_sales,
        'sales_by_dow': sales_by_dow,
        'days_worked': len(days_worked)
    }

def generate_seller_stats_image(seller_name: str, stats_data: dict) -> io.BytesIO:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏."""
    days = DAYS_OF_WEEK_RU
    sales = [stats_data['sales_by_dow'].get(day, 0) for day in days]
    
    plt.style.use('seaborn-v0_8-darkgrid')
    fig, ax = plt.subplots(figsize=(10, 6))
    
    bars = ax.bar(days, sales, color='#4c72b0', alpha=0.7)
    
    ax.set_title(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è {seller_name} –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', fontsize=16, pad=20)
    ax.set_ylabel('–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂, ‚Ç¥', fontsize=12)
    ax.tick_params(axis='x', rotation=45, labelsize=10)
    ax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    for bar in bars:
        height = bar.get_height()
        if height > 0:
            ax.text(bar.get_x() + bar.get_width()/2., height, f'{int(height)}', ha='center', va='bottom', fontsize=10)
            
    fig.tight_layout()
    
    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)
    return buf

# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def show_seller_stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()

    sellers_for_stats = ["–õ—é–¥–º–∏–ª–∞", "–ú–∞—Ä–∏—è"]
    kb = []
    for seller in sellers_for_stats:
        kb.append([InlineKeyboardButton(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {seller}", callback_data=f"view_seller_stats_{seller}")])
    
    # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    kb.append([InlineKeyboardButton("üèÜ –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", callback_data="compare_sellers")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="staff_menu")])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –ø—Ä–∏—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å –º–µ–Ω—é
    await query.message.delete()
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    
async def show_seller_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞."""
    query = update.callback_query
    seller_name = query.data.split('_', 3)[3]
    await query.message.edit_text("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∏—Å—É—é –≥—Ä–∞—Ñ–∏–∫...")

    stats = get_seller_stats_data(context, seller_name)
    
    if not stats or not stats['shift_count']:
        await query.message.edit_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–≤—Ü—É {seller_name}.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="seller_stats")]]))
        return

    msg = (f"<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {seller_name}</b> (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)\n\n"
           f"<b>–í—Å–µ–≥–æ —Å–º–µ–Ω:</b> {stats['shift_count']}\n"
           f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂:</b> {stats['total_sales']:.2f}‚Ç¥\n"
           f"<b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ —Å–º–µ–Ω—É:</b> {stats['avg_sales']:.2f}‚Ç¥\n")

    image_buffer = generate_seller_stats_image(seller_name, stats)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "—Ä–∏—Å—É—é –≥—Ä–∞—Ñ–∏–∫" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    await query.message.delete()
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=image_buffer,
        caption=msg,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="seller_stats")]])
    )

async def view_shifts_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE, year=None, month=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    query = update.callback_query
    
    if year is None or month is None:
        today = dt.date.today()
        year, month = today.year, today.month

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–∞—Ö
    rows = get_cached_sheet_data(context, SHEET_SHIFTS)
    shifts_data = {row[0]: [seller for seller in row[1:] if seller] for row in rows} if rows else {}
    
    kb = generate_calendar_keyboard(year, month, shifts_data, mode='view')
    await query.message.edit_text("üóìÔ∏è <b>–ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏.",
                                  parse_mode=ParseMode.HTML, reply_markup=kb)

# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ ---
async def show_shift_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–º–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –§–æ—Ä–º–∞—Ç callback_data: view_shift_–î–î.–ú–ú.–ì–ì–ì–ì
        date_str = query.data.split('_', 2)[2]
    except IndexError:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    rows = get_cached_sheet_data(context, SHEET_SHIFTS)
    if rows is None:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö.")
        return
        
    sellers_on_day = []
    for row in rows:
        if row and row[0] == date_str:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞—è –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
            sellers_on_day = [seller for seller in row[1:] if seller]
            break
            
    msg = f"üóìÔ∏è <b>–°–º–µ–Ω–∞ –Ω–∞ {date_str}</b>\n\n"
    if not sellers_on_day:
        msg += "<i>–ù–∞ —ç—Ç—É –¥–∞—Ç—É —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.</i>"
    else:
        msg += "<b>–í —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞–±–æ—Ç–∞—é—Ç:</b>\n"
        for seller in sellers_on_day:
            msg += f"  ‚Ä¢ üë§ {seller}\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    date_obj = pdate(date_str)
    year, month = date_obj.year, date_obj.month
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    is_admin = str(query.from_user.id) in ADMINS
    back_callback = "edit_shifts" if is_admin else "view_shifts"
    
    kb = [[InlineKeyboardButton("üîô –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=back_callback)]]
    
    await query.message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))

async def edit_shifts_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE, year=None, month=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    query = update.callback_query
    if str(query.from_user.id) not in ADMINS:
        await query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return

    if year is None or month is None:
        today = dt.date.today()
        year, month = today.year, today.month
        
    rows = get_cached_sheet_data(context, SHEET_SHIFTS)
    shifts_data = {row[0]: [seller for seller in row[1:] if seller] for row in rows} if rows else {}
    
    kb = generate_calendar_keyboard(year, month, shifts_data, mode='edit')
    await query.message.edit_text("‚úèÔ∏è <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.",
                                  parse_mode=ParseMode.HTML, reply_markup=kb)

async def edit_single_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã."""
    query = update.callback_query
    date_str = query.data.split('_', 2)[2]
    
    rows = get_cached_sheet_data(context, SHEET_SHIFTS)
    shifts_data = {row[0]: [seller for seller in row[1:] if seller] for row in rows} if rows else {}
    
    sellers_on_day = shifts_data.get(date_str, [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['edit_shift'] = {
        'date': date_str,
        'sellers': sellers_on_day
    }

    kb = []
    for seller in SELLERS:
        icon = "‚úÖ" if seller in sellers_on_day else "‚ùå"
        kb.append([InlineKeyboardButton(f"{icon} {seller}", callback_data=f"toggle_seller_{seller}")])
    
    kb.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º–µ–Ω—É", callback_data="save_shift")])
    kb.append([InlineKeyboardButton("üîô –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="edit_shifts")])
    
    await query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ <b>{date_str}</b>:",
                                  parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
                                  
async def toggle_seller_for_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç/—É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ —Å–º–µ–Ω—ã."""
    query = update.callback_query
    await query.answer()
    
    seller_name = query.data.split('_', 2)[2]
    edit_state = context.user_data.get('edit_shift', {})
    
    if seller_name in edit_state['sellers']:
        edit_state['sellers'].remove(seller_name)
    else:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±–æ–ª—å—à–µ 2 –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        if len(edit_state['sellers']) < 2:
            edit_state['sellers'].append(seller_name)
        else:
            await query.answer("üö´ –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –±–æ–ª—å—à–µ –¥–≤—É—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ —Å–º–µ–Ω—É.", show_alert=True)
            return
            
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    kb = []
    for seller in SELLERS:
        icon = "‚úÖ" if seller in edit_state['sellers'] else "‚ùå"
        kb.append([InlineKeyboardButton(f"{icon} {seller}", callback_data=f"toggle_seller_{seller}")])
    
    kb.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º–µ–Ω—É", callback_data="save_shift")])
    kb.append([InlineKeyboardButton("üîô –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="edit_shifts")])
    
    await query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(kb))

async def save_shift_changes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É."""
    query = update.callback_query
    
    edit_state = context.user_data.get('edit_shift', {})
    date_str = edit_state.get('date')
    new_sellers = edit_state.get('sellers', [])
    
    try:
        ws = GSHEET.worksheet(SHEET_SHIFTS)
        all_rows = ws.get_all_values()
        
        found_row_index = -1
        for i, row in enumerate(all_rows):
            if row and row[0] == date_str:
                found_row_index = i + 1
                break
        
        if found_row_index != -1: # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º
            ws.update_cell(found_row_index, 2, new_sellers[0] if len(new_sellers) > 0 else "")
            ws.update_cell(found_row_index, 3, new_sellers[1] if len(new_sellers) > 1 else "")
        else: # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            row_to_add = [date_str] + new_sellers + [""] * (2 - len(new_sellers))
            ws.append_row(row_to_add)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
        if 'sheets_cache' in context.bot_data:
            context.bot_data['sheets_cache'].pop(SHEET_SHIFTS, None)
            
        await query.answer("‚úÖ –°–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", show_alert=True)
        context.user_data.pop('edit_shift', None)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        await edit_shifts_calendar(update, context)
        
    except Exception as e:
        await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ–Ω—ã: {e}")


async def handle_report_cash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        cash = float(update.message.text.replace(',', '.'))
        context.user_data['report']['cash'] = cash
        context.user_data['report']['step'] = 'terminal'
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ê–†–ò–ê–ù–¢
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_cash_input"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="cancel_report")
            ]
        ])
        
        await update.message.reply_text(
            "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É:",
            reply_markup=keyboard  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–¥–µ—Å—å
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

async def handle_report_terminal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        terminal = float(update.message.text.replace(',', '.'))
        context.user_data['report']['terminal'] = terminal
        context.user_data['report']['step'] = 'expenses_ask'
        
        kb = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="exp_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="exp_no")],# <-- –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–∞–¥
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="cancel_report")]     # <-- –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–º–µ–Ω—É
        ]
        
        await update.message.reply_text(
            "üí∏ –ë—ã–ª–∏ –ª–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã?",
            reply_markup=InlineKeyboardMarkup(kb))
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

async def cancel_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer("–°–¥–∞—á–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    if 'report' in context.user_data:
        del context.user_data['report']
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    is_admin = str(query.from_user.id) in ADMINS
    await query.message.edit_text(
        "‚ùå –°–¥–∞—á–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_kb(is_admin)
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for key in ['report', 'supplier', 'expense', 'inventory_expense']:
        if key in context.user_data:
            del context.user_data[key]
    
    is_admin = str(update.effective_user.id) in ADMINS
    await update.message.reply_text(
        "‚ùå –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_kb(is_admin)
    )

# –î–æ–±–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂

async def handle_report_expenses_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "exp_yes":
        context.user_data['report']['step'] = 'expenses'
        context.user_data['report']['expenses'] = []
        await query.message.edit_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=back_kb()
        )
    else:
        # –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
        context.user_data['report']['step'] = 'comment'
        await query.message.edit_text(
            "üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç—á–µ—Ç—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_report")]
            ])
        )
async def handle_report_expenses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(',', '.'))
        context.user_data['report']['expenses'].append({'amount': amount})
        context.user_data['report']['step'] = 'expense_comment'
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:",
            reply_markup=back_kb()
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

async def debug_get_planning_details(report_date: dt.date):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ –ü–ª–∞–Ω–§–∞–∫—Ç–ù–∞–ó–∞–≤—Ç—Ä–∞."""
    report_date_str = sdate(report_date)
    debug_log = [f"\n\n<b>--- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–õ–ê–ù–û–í –ù–ê {report_date_str} ---</b>"]
    
    try:
        ws = GSHEET.worksheet(SHEET_PLAN_FACT)
        debug_log.append(f"‚úÖ –õ–∏—Å—Ç '{SHEET_PLAN_FACT}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç.")
        
        rows = ws.get_all_values()[1:] # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        debug_log.append(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: {len(rows)}.")
        
        if not rows:
            debug_log.append("‚ùå –õ–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏.")
            return "\n".join(debug_log)

        found_match = False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –æ—Ç—á–µ—Ç
        for i, row in enumerate(rows[:15]):
            if not row or not row[0]:
                debug_log.append(f"  - –°—Ç—Ä–æ–∫–∞ {i+1}: –ø—É—Å—Ç–∞—è.")
                continue

            sheet_date_str = row[0].strip()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º repr() —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            debug_log.append(f"  - –°—Ç—Ä–æ–∫–∞ {i+1}: –≤ —è—á–µ–π–∫–µ A –∑–∞–ø–∏—Å–∞–Ω–æ: <code>{repr(row[0])}</code>")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            is_match = (sheet_date_str == report_date_str)
            if is_match:
                found_match = True
                debug_log.append(f"    <b>‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï!</b> ( {sheet_date_str} == {report_date_str} )")
            else:
                debug_log.append(f"    <b>‚ùå –ù–ï–¢ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.</b> ( {sheet_date_str} != {report_date_str} )")
        
        if len(rows) > 15:
            debug_log.append("  ...")
            
        if found_match:
            debug_log.append("<b>–í—ã–≤–æ–¥: –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –Ω–µ –ø–∞—Ä—Å–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.</b>")
        else:
            debug_log.append("<b>–í—ã–≤–æ–¥: –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –¥–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.</b>")

    except Exception as e:
        debug_log.append(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞: {e}")
        
    return "\n".join(debug_log)

async def handle_expense_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    expenses = context.user_data['report']['expenses']
    expenses[-1]['comment'] = comment
    context.user_data['report']['step'] = 'expense_more'
    
    kb = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="more_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="more_no")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_report")]
    ]
    
    await update.message.reply_text(
        "üí∏ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ä–∞—Å—Ö–æ–¥?",
        reply_markup=InlineKeyboardMarkup(kb))

async def handle_expense_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "more_yes":
        context.user_data['report']['step'] = 'expenses'
        await query.message.edit_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=back_kb()
        )
    else:
        # –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
        context.user_data['report']['step'] = 'comment'
        await query.message.edit_text(
            "üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç—á–µ—Ç—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_report")]
            ])
        )

async def show_today_invoices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
    query = update.callback_query
    await query.answer()
    today_str = sdate()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    rows = get_cached_sheet_data(context, SHEET_SUPPLIERS)
    if rows is None:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞—Ö.")
        return
        
    # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ, —á—Ç–æ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
    today_invoices = [row for row in rows if len(row) > 6 and row[0].strip() == today_str]
    
    msg = f"üìÑ <b>–ù–∞–∫–ª–∞–¥–Ω—ã–µ, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è ({today_str}):</b>\n"
    if not today_invoices:
        msg += "\n<i>–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π.</i>"
    else:
        for invoice in today_invoices:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            supplier = invoice[1] if len(invoice) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω"
            to_pay_str = invoice[4] if len(invoice) > 4 else "0"
            pay_type = invoice[6] if len(invoice) > 6 else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            try:
                to_pay = float(to_pay_str.replace(',', '.'))
            except (ValueError, TypeError):
                to_pay = 0.0

            msg += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            msg += f"<b>{supplier}</b>\n"
            msg += f"  ‚Ä¢ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {to_pay:.2f}‚Ç¥\n"
            msg += f"  ‚Ä¢ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {pay_type}"

    kb = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", callback_data="suppliers_menu")]]
    await query.message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
    
async def save_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –ø—É—Å—Ç—ã–º
        if 'report' not in context.user_data: context.user_data['report'] = {}
        context.user_data['report']['comment'] = ""
    else:
        context.user_data['report']['comment'] = update.message.text

    report_data = context.user_data['report']
    today_str = sdate()
    current_date = pdate(today_str)
    tomorrow_date = current_date + dt.timedelta(days=1)
    
    # 1. –û—á–∏—â–∞–µ–º –ø–ª–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ù–ê –°–ï–ì–û–î–ù–Ø
    clear_plan_for_date(today_str)

    # 2. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–∞
    cash = report_data['cash']
    terminal = report_data['terminal']
    total_sales = cash + terminal
    seller = report_data['seller']
    comment = report_data.get('comment', '')
    
    # 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –≤ —Ç–∞–±–ª–∏—Ü—É –†–ê–°–•–û–î–´
    expenses_total = sum(exp['amount'] for exp in report_data.get('expenses', []))
    if 'expenses' in report_data and report_data['expenses']:
        ws_exp = GSHEET.worksheet(SHEET_EXPENSES)
        for exp in report_data['expenses']:
            # –†–∞—Å—Ö–æ–¥—ã –≤—ã—á–∏—Ç–∞—é—Ç—Å—è –∏–∑ –∫–∞—Å—Å—ã, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–µ–π—Ñ –Ω–∞–ø—Ä—è–º—É—é
            ws_exp.append_row([today_str, exp['amount'], exp.get('comment', ''), seller])

    # 4. –ü—Ä–æ–≤–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –°–ï–ô–§–û–ú
    balance_before_shift = get_safe_balance(context)
    cash_balance = cash - expenses_total
    add_safe_operation("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", cash_balance, "–û—Å—Ç–∞—Ç–æ–∫ –∫–∞—Å—Å—ã –∑–∞ –¥–µ–Ω—å", seller)
    add_inventory_operation("–ü—Ä–æ–¥–∞–∂–∞", total_sales, "–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Å–º–µ–Ω—É", seller)
    
    # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –ó–ü –∏–∑ —Å–µ–π—Ñ–∞
    if seller in ["–ú–∞—Ä–∏—è", "–õ—é–¥–º–∏–ª–∞"]:
        add_safe_operation("–ó–∞—Ä–ø–ª–∞—Ç–∞", 700, f"–°—Ç–∞–≤–∫–∞ –∑–∞ —Å–º–µ–Ω—É –¥–ª—è {seller}", seller)
        add_salary_record(seller, "–°—Ç–∞–≤–∫–∞", 700, "–í—ã–ø–ª–∞—á–µ–Ω–æ –∏–∑ —Å–µ–π—Ñ–∞")
        if total_sales > 35000:
            bonus = round((total_sales * 0.02) - 700, 2)
            if bonus > 0:
                add_salary_record(seller, "–ü—Ä–µ–º–∏—è 2%", bonus, f"–ó–∞ {today_str} (–ø—Ä–æ–¥–∞–∂–∏: {total_sales:.2f}‚Ç¥)")

    if 'sheets_cache' in context.bot_data and "–°–µ–π—Ñ" in context.bot_data['sheets_cache']:
        del context.bot_data['sheets_cache']["–°–µ–π—Ñ"]


    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Å–µ–π—Ñ–∞
    safe_bal_after_shift = get_safe_balance(context)

    # 5. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ù–ê –ó–ê–í–¢–†–ê
    total_debts, suppliers_debts = get_debts_for_date(context, tomorrow_date)
    planning_report, planned_cash, planned_card, planned_total = get_planning_details_for_date(context, tomorrow_date)
    
    # 6. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –î–ù–ï–í–ù–´–ï –û–¢–ß–ï–¢–´
    ws_report = GSHEET.worksheet(SHEET_REPORT)
    report_row_data = [
        today_str, seller, cash, terminal, total_sales, 
        cash_balance, total_debts, planned_total, comment, safe_bal_after_shift
    ]
    ws_report.append_row(report_row_data)

    # 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    resp = (f"‚úÖ <b>–°–º–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìÖ –î–∞—Ç–∞: {today_str}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller}\n"
            f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash:.2f}‚Ç¥\n"
            f"üí≥ –ö–∞—Ä—Ç–∞: {terminal:.2f}‚Ç¥\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_sales:.2f}‚Ç¥\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses_total:.2f}‚Ç¥\n"
            f"üè¶ –û—Å—Ç–∞—Ç–æ–∫ –∫–∞—Å—Å—ã: {cash_balance:.2f}‚Ç¥\n"
            f"\n<b>--- –†–∞—Å—á–µ—Ç —Å–µ–π—Ñ–∞ ---</b>\n"
            f"‚Ä¢ –ë—ã–ª–æ –≤ —Å–µ–π—Ñ–µ: {balance_before_shift:.2f}‚Ç¥\n"
            f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –∫–∞—Å—Å—ã: +{cash_balance:.2f}‚Ç¥\n"
            f"‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞ (—Å—Ç–∞–≤–∫–∞): -700.00‚Ç¥\n"
            f"‚Ä¢ <b>–°—Ç–∞–ª–æ –≤ —Å–µ–π—Ñ–µ: {safe_bal_after_shift:.2f}‚Ç¥</b>\n")
    
    if not planning_report and not suppliers_debts:
         resp += f"\n\n‚ÑπÔ∏è *–ù–µ—Ç –ø–ª–∞–Ω–æ–≤ –∏–ª–∏ –¥–æ–ª–≥–æ–≤ –Ω–∞ {sdate(tomorrow_date)}.*"
    else:
        if planning_report: resp += planning_report
        if suppliers_debts:
            resp += "\n\n<b>üóì –î–æ–ª–≥–∏ –∫ –æ–ø–ª–∞—Ç–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n" + "\n".join([f"- {n}: {a:.2f}‚Ç¥" for n, a in suppliers_debts])
    
    total_needed_cash = total_debts + planned_cash
    total_needed_card = planned_card
    
    resp += "\n"
    if total_needed_cash > 0: resp += f"\n<b>–ò–¢–û–ì–û –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏: {total_needed_cash:.2f}‚Ç¥</b>"
    if total_needed_card > 0: resp += f"\n<b>–ò–¢–û–ì–û –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∫–∞—Ä—Ç–æ–π: {total_needed_card:.2f}‚Ç¥</b>"
    
    kb = [[
        InlineKeyboardButton("üí∏ –î–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—Å—Ö–æ–¥—ã", callback_data=f"details_exp_{today_str}_{today_str}"),
        InlineKeyboardButton("üì¶ –î–µ—Ç–∞–ª—å–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ", callback_data=f"details_sup_{today_str}_{today_str}_0")
    ], [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    markup = InlineKeyboardMarkup(kb)

    if update.callback_query:
        await update.callback_query.message.edit_text(resp, parse_mode=ParseMode.HTML, reply_markup=markup)
    else:
        await update.message.reply_text(resp, parse_mode=ParseMode.HTML, reply_markup=markup)
    context.user_data.pop('report', None)

# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def generate_daily_report_text(context: ContextTypes.DEFAULT_TYPE, report_date_str: str):
    """–ì–æ—Ç–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Ç–∞—è 10 —Å—Ç–æ–ª–±—Ü–æ–≤."""
    reports = get_cached_sheet_data(context, SHEET_REPORT)
    if reports is None: return "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤."
    
    daily_report_row = next((row for row in reports if row and row[0].strip() == report_date_str), None)
    if not daily_report_row: return f"‚ùå –û—Ç—á–µ—Ç –∑–∞ –¥–∞—Ç—É {report_date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω."

    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 10 —Å—Ç–æ–ª–±—Ü–æ–≤, –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        if len(daily_report_row) < 10:
            raise IndexError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.")
            
        date, seller, cash_s, term_s, total_s, cash_bal_s, _, _, comment, safe_bal_s = daily_report_row[:10]
        cash, terminal, total_sales, safe_balance = map(float, [v.replace(',', '.') for v in [cash_s, term_s, total_s, safe_bal_s]])
    except (ValueError, IndexError) as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç—á–µ—Ç–µ –∑–∞ {report_date_str}: {e}"
    
    expenses = get_cached_sheet_data(context, SHEET_EXPENSES)
    expenses_total = sum(float(row[1].replace(',', '.')) for row in expenses if row and row[0].strip() == date and len(row) > 1 and row[1]) if expenses else 0

    resp = (f"üìñ <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {date}</b>\n\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller}\n"
            f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash:.2f}‚Ç¥\n"
            f"üí≥ –ö–∞—Ä—Ç–∞: {terminal:.2f}‚Ç¥\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_sales:.2f}‚Ç¥\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses_total:.2f}‚Ç¥\n"
            f"üíº <b>–û—Å—Ç–∞—Ç–æ–∫ –≤ —Å–µ–π—Ñ–µ (–Ω–∞ –∫–æ–Ω–µ—Ü —Ç–æ–≥–æ –¥–Ω—è): {safe_balance:.2f}‚Ç¥</b>")
    if comment: resp += f"\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    
    report_date = pdate(date)
    if report_date:
        next_day = report_date + dt.timedelta(days=1)
        total_debts, suppliers_debts = get_debts_for_date(context, next_day)
        planning_report, planned_cash, planned_card, _ = get_planning_details_for_date(context, next_day)

        if not planning_report and not suppliers_debts:
             resp += f"\n\n‚ÑπÔ∏è *–ù–µ—Ç –ø–ª–∞–Ω–æ–≤ –∏–ª–∏ –¥–æ–ª–≥–æ–≤ –Ω–∞ {sdate(next_day)}.*"
        else:
            if planning_report: resp += planning_report
            if suppliers_debts:
                resp += "\n\n<b>üóì –î–æ–ª–≥–∏ –∫ –æ–ø–ª–∞—Ç–µ –Ω–∞ —Å–ª–µ–¥. –¥–µ–Ω—å:</b>\n" + "\n".join([f"- {n}: {a:.2f}‚Ç¥" for n, a in suppliers_debts])
            
            total_needed_cash = total_debts + planned_cash
            total_needed_card = planned_card
            
            resp += "\n"
            if total_needed_cash > 0: resp += f"\n<b>–ò–¢–û–ì–û –Ω–∞ —Å–ª–µ–¥. –¥–µ–Ω—å –Ω–∞–ª–∏—á–Ω—ã–º–∏: {total_needed_cash:.2f}‚Ç¥</b>"
            if total_needed_card > 0: resp += f"\n<b>–ò–¢–û–ì–û –Ω–∞ —Å–ª–µ–¥. –¥–µ–Ω—å –∫–∞—Ä—Ç–æ–π: {total_needed_card:.2f}‚Ç¥</b>"
            
    return resp
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def show_detailed_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞—Ç."""
    query = update.callback_query
    await query.answer()

    try:
        _, _, _, start_str, end_str, index_str = query.data.split('_')
        current_index = int(index_str)
    except (IndexError, ValueError):
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç.")
        return

    start_date, end_date = pdate(start_str), pdate(end_str)
    
    report_rows = get_cached_sheet_data(context, SHEET_REPORT)
    if report_rows is None:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –∫—ç—à–∞.")
        return

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É `if pdate(row[0])` ---
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏, –≥–¥–µ –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
    period_report_dates = sorted(
        list({row[0].strip() for row in report_rows if pdate(row[0]) and start_date <= pdate(row[0]) <= end_date}),
        key=pdate, 
        reverse=True
    )

    if not period_report_dates or current_index >= len(period_report_dates):
        await query.message.edit_text("‚ùå –í —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return

    target_date_str = period_report_dates[current_index]
    # –ü–µ—Ä–µ–¥–∞–µ–º context –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã generate_daily_report_text —Ç–æ–∂–µ –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
    report_text = await generate_daily_report_text(context, target_date_str)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    nav_buttons = []
    if current_index < len(period_report_dates) - 1:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"detail_report_nav_{start_str}_{end_str}_{current_index + 1}"))
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"detail_report_nav_{start_str}_{end_str}_{current_index - 1}"))
    
    full_nav_context = f"{target_date_str}_{start_str}_{end_str}_{current_index}"
    kb = []
    if nav_buttons:
        kb.append(nav_buttons)
    
    kb.append([
        InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å", callback_data=f"details_exp_{full_nav_context}"),
        InlineKeyboardButton("üì¶ –ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ –¥–µ–Ω—å", callback_data=f"details_sup_{full_nav_context}_0")
    ])
    
    back_callback = f"report_week_{start_str}_{end_str}" if (end_date - start_date).days <= 7 else f"report_month_{start_str}_{end_str}"
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –æ–±—â–µ–º—É –æ—Ç—á–µ—Ç—É", callback_data=back_callback)])
    
    await query.message.edit_text(report_text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–í–ï –§–£–ù–ö–¶–ò–ò ---

async def get_report_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    today_str = sdate(dt.date.today())
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º context –∏ report_date_str
    report_text = await generate_daily_report_text(context, today_str)
    
    kb = [[
        InlineKeyboardButton("üí∏ –î–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—Å—Ö–æ–¥—ã", callback_data=f"details_exp_{today_str}_{today_str}"),
        InlineKeyboardButton("üì¶ –î–µ—Ç–∞–ª—å–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ", callback_data=f"details_sup_{today_str}_{today_str}_0")
    ], [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="view_reports_menu")]]
    
    await query.message.edit_text(
        report_text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def get_report_yesterday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    yesterday = dt.date.today() - dt.timedelta(days=1)
    yesterday_str = sdate(yesterday)

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º context –∏ report_date_str
    report_text = await generate_daily_report_text(context, yesterday_str)
    
    kb = [[
        InlineKeyboardButton("üí∏ –î–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—Å—Ö–æ–¥—ã", callback_data=f"details_exp_{yesterday_str}_{yesterday_str}"),
        InlineKeyboardButton("üì¶ –î–µ—Ç–∞–ª—å–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ", callback_data=f"details_sup_{yesterday_str}_{yesterday_str}_0")
    ], [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="view_reports_menu")]]
    
    await query.message.edit_text(
        report_text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(kb)
    )
async def choose_details_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π (—Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö)."""
    query = update.callback_query
    await query.answer()

    try:
        # –§–æ—Ä–º–∞—Ç: choose_date_–¢–ò–ü_–î–ê–¢–ê-–°–¢–ê–†–¢_–î–ê–¢–ê-–ö–û–ù–ï–¶
        _, _, detail_type, start_str, end_str = query.data.split('_')
    except ValueError:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.")
        return

    start_date = pdate(start_str)
    end_date = pdate(end_str)
    
    msg = f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥\n{start_str} ‚Äî {end_str}\n\n"
    kb = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –≤ –ø–µ—Ä–∏–æ–¥–µ
    current_date = start_date
    while current_date <= end_date:
        date_str = sdate(current_date)
        # –î–æ–±–∞–≤–ª—è–µ–º _0 –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        callback = f"details_{detail_type}_{date_str}_{start_str}_{end_str}_0"
        kb.append([InlineKeyboardButton(date_str, callback_data=callback)])
        current_date += dt.timedelta(days=1)

    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
    if detail_type == 'exp':
        ws_exp = GSHEET.worksheet(SHEET_EXPENSES)
        rows = ws_exp.get_all_values()[1:]
        total_exp = 0
        for row in rows:
            try:
                d = pdate(row[0])
                if start_date <= d <= end_date and row[1]:
                    total_exp += float(row[1].replace(',', '.'))
            except (ValueError, IndexError):
                continue
        msg += f"<b>–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_exp:.2f}‚Ç¥</b>\n"

    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–±—â–µ–º—É –æ—Ç—á–µ—Ç—É", callback_data=f"report_week_{start_str}_{end_str}")])
    await query.message.edit_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
    

# --- –†–ê–°–•–û–î–´ ---
async def start_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['expense'] = {'step': 'value'}
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:",
        reply_markup=back_kb()
    )


async def handle_expense_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(',', '.'))
        context.user_data['expense']['amount'] = amount
        context.user_data['expense']['step'] = 'comment'
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:",
            reply_markup=back_kb()
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

async def save_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    amount = context.user_data['expense']['amount']
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
    try:
        ws = GSHEET.worksheet(SHEET_EXPENSES)
        ws.append_row([sdate(), amount, comment, update.effective_user.first_name])
        await update.message.reply_text("‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        context.user_data.pop('expense', None)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# --- –ü–û–°–¢–ê–í–©–ò–ö–ò ---
# --- START ADD SUPPLIER ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
async def start_supplier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π, —Å–∫—Ä—ã–≤–∞—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."""
    query = update.callback_query
    await query.answer()

    today_str = sdate()
    day_of_week = DAYS_OF_WEEK_RU[dt.date.today().weekday()]

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        scheduled_suppliers = get_suppliers_for_day(day_of_week)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –£–ñ–ï –µ—Å—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        ws_sup = GSHEET.worksheet(SHEET_SUPPLIERS)
        rows = ws_sup.get_all_values()[1:]
        added_today_suppliers = {row[1].strip() for row in rows if len(row) > 1 and row[0].strip() == today_str}

        # 3. –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ–≥–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏
        suppliers_to_show = [s for s in scheduled_suppliers if s not in added_today_suppliers]

    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")
        suppliers_to_show = []

    kb = []
    for supplier in suppliers_to_show:
        kb.append([InlineKeyboardButton(f"üöö {supplier}", callback_data=f"add_sup_{supplier}")])
    
    kb.append([InlineKeyboardButton("üìù –î—Ä—É–≥–æ–π (–Ω–µ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É)", callback_data="add_sup_other")])
    kb.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", callback_data="suppliers_menu")])

    await query.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode=ParseMode.HTML
    )


# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ ---
# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ ---
async def inventory_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Å—Ç–∞—Ç–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–∞."""
    query = update.callback_query
    await query.answer()
    
    rows = get_cached_sheet_data(context, "–û—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞")
    if rows is None:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞.")
        return

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –æ–ø–µ—Ä–∞—Ü–∏–π
    last_ops = rows[-15:]
    last_ops.reverse() # –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
    
    text = "üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Å—Ç–∞—Ç–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–∞:</b>\n"
    if not last_ops:
        text += "\n<i>–û–ø–µ—Ä–∞—Ü–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ.</i>"
    else:
        for row in last_ops:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            date, op_type, amount, comment, user = (row + ["", "", "", "", ""])[:5]
            
            # –ü–æ–¥–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            icon = "‚öôÔ∏è" # –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if op_type == "–ü—Ä–∏—Ö–æ–¥":
                icon = "üü¢"
            elif op_type in ["–ü—Ä–æ–¥–∞–∂–∞", "–°–ø–∏—Å–∞–Ω–∏–µ"]:
                icon = "üî¥"
            elif op_type == "–ü–µ—Ä–µ—É—á–µ—Ç":
                icon = "üîµ"
            
            # –î–ª—è –ø–µ—Ä–µ—É—á–µ—Ç–∞ —Å—É–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, –¥–µ–ª–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ
            amount_text = f"{amount}‚Ç¥" if amount else ""

            text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            text += f"{icon} <b>{op_type}: {amount_text}</b> ({user})\n"
            text += f"   <i>{date} - {comment}</i>"
        
    await query.message.edit_text(text, parse_mode='HTML', reply_markup=stock_safe_kb())


    
# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ ---
async def handle_add_supplier_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π."""
    query = update.callback_query
    await query.answer()
    
    supplier_name = query.data.split('_', 2)[2]
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–î—Ä—É–≥–æ–π"
    if supplier_name == "other":
        context.user_data['supplier'] = {'step': 'name'}
        await query.message.edit_text(
            "üì¶ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_supplier")]])
        )
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    else:
        context.user_data['supplier'] = {'name': supplier_name, 'step': 'amount_income'}
        await query.message.edit_text(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è <b>{supplier_name}</b>:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_supplier")]]),
            parse_mode=ParseMode.HTML
        )


async def handle_supplier_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['supplier']['name'] = update.message.text
    context.user_data['supplier']['step'] = 'amount_income'
    await update.message.reply_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞ (–ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π):",
        reply_markup=back_kb()
    )

# 2. –°—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–∞
async def handle_supplier_amount_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount_income = float(update.message.text.replace(',', '.'))
        context.user_data['supplier']['amount_income'] = amount_income
        context.user_data['supplier']['step'] = 'writeoff'
        await update.message.reply_text(
            "‚Ü©Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞/—Å–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî 0):",
            reply_markup=back_kb()
        )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º!")

# 3. –í–æ–∑–≤—Ä–∞—Ç/–°–ø–∏—Å–∞–Ω–∏–µ
async def handle_supplier_writeoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        writeoff = float(update.message.text.replace(',', '.'))
        context.user_data['supplier']['writeoff'] = writeoff
        context.user_data['supplier']['step'] = 'invoice_total_markup'
        await update.message.reply_text(
            "üìë –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å–ª–µ –Ω–∞—Ü–µ–Ω–∫–∏ (–∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –æ—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞):",
            reply_markup=back_kb()
        )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º!")

# 4. –°—É–º–º–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å–ª–µ –Ω–∞—Ü–µ–Ω–∫–∏
async def handle_supplier_invoice_total_markup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        invoice_total = float(update.message.text.replace(',', '.'))
        context.user_data['supplier']['invoice_total_markup'] = invoice_total
        context.user_data['supplier']['step'] = 'payment_type'
        kb = [
            [InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="pay_–ù–∞–ª–∏—á–Ω—ã–µ")],
            [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data="pay_–ö–∞—Ä—Ç–∞")],
            [InlineKeyboardButton("üìÜ –î–æ–ª–≥", callback_data="pay_–î–æ–ª–≥")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_supplier")]
        ]
        await update.message.reply_text(
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(kb)
        )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º!")


# 5. –¢–∏–ø –æ–ø–ª–∞—Ç—ã (callback)
async def handle_supplier_pay_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    pay_type = query.data.split('_', 1)[1] # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –±—É–¥–µ—Ç "–ù–∞–ª–∏—á–Ω—ã–µ", "–ö–∞—Ä—Ç–∞" –∏–ª–∏ "–î–æ–ª–≥"
    context.user_data['supplier']['payment_type'] = pay_type

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ-—Ä—É—Å—Å–∫–∏ ---
    if pay_type == "–î–æ–ª–≥":
        context.user_data['supplier']['step'] = 'due_date'
        await query.message.edit_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_supplier")]])
        )
    else:
        context.user_data['supplier']['step'] = 'comment'
        await query.message.edit_text(
            "üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment_supplier")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_supplier")]
            ])
        )
# 6. –°—Ä–æ–∫ –¥–æ–ª–≥–∞
async def handle_supplier_due_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        due_date = pdate(update.message.text)
        context.user_data['supplier']['due_date'] = due_date
        context.user_data['supplier']['step'] = 'comment'
        await update.message.reply_text(
            "üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment_supplier")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_supplier")]
            ])
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

async def view_debts_history(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    query = update.callback_query
    await query.answer()
    
    context.user_data['debts_history_page'] = page
    rows = get_cached_sheet_data(context, SHEET_DEBTS)
    if rows is None:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–ª–≥–æ–≤.")
        return
        
    per_page = 10
    total = len(rows)
    total_pages = max(1, math.ceil(total / per_page))

    # –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É:
    rows = rows[::-1]
    page_rows = rows[page * per_page : (page + 1) * per_page]

    if not page_rows:
        await query.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=debts_menu_kb())
        return

    msg = f"<b>üìú –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤ (—Å—Ç—Ä. {page+1}/{total_pages}):</b>\n\n"
    for idx, row in enumerate(page_rows, 1 + page * per_page):
        status = "‚úÖ" if row[6].strip().lower() == "–¥–∞" else "üü†"
        msg += (
            f"{idx}. {status} <b>{row[1]}</b>\n"
            f"   ‚Ä¢ –î–∞—Ç–∞: {row[0]}\n"
            f"   ‚Ä¢ –°—É–º–º–∞: <b>{parse_float(row[2]):.2f}‚Ç¥</b>\n"
            f"   ‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {parse_float(row[3]):.2f}‚Ç¥ \n"
            f"   ‚Ä¢ –°—Ä–æ–∫: {row[5]} | –ü–æ–≥–∞—à–µ–Ω–æ: {row[6]}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    # –ö–Ω–æ–ø–∫–∏ –í–ø–µ—Ä—ë–¥/–ù–∞–∑–∞–¥
    kb = []
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="debts_history_prev"))
    if (page + 1) * per_page < total:
        nav.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data="debts_history_next"))
    if nav:
        kb.append(nav)
    kb.append([InlineKeyboardButton("üîô –î–æ–ª–≥–∏", callback_data="debts_menu")])

    await query.message.edit_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
    context.user_data['debts_history_page'] = page

    
# 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def save_supplier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—É—é –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç –≤—Å–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    message = query.message if query else update.message
    
    if query:
        await query.answer()
    
    # --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ---
    if 'supplier' not in context.user_data:
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π —É—Ç–µ—Ä—è–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", 
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", callback_data="suppliers_menu")]])
        )
        return

    supplier_data = context.user_data['supplier']

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –µ–≥–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∏–ª–∏ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç–æ–º
    if query and query.data == "skip_comment_supplier":
        supplier_data['comment'] = ""
    elif not query:
        supplier_data['comment'] = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ
    required_keys = ['name', 'amount_income', 'writeoff', 'invoice_total_markup', 'payment_type']
    if not all(key in supplier_data for key in required_keys):
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=suppliers_menu_kb())
        context.user_data.pop('supplier', None)
        return

    pay_type = supplier_data['payment_type']
    who = update.effective_user.first_name

    amount_income = float(supplier_data['amount_income'])
    amount_writeoff = float(supplier_data.get('writeoff', 0))
    invoice_total_markup = float(supplier_data['invoice_total_markup'])
    sum_to_pay = amount_income - amount_writeoff
    
    paid_status = "–ù–µ—Ç"
    debt_amount = 0
    due_date = ""

    if pay_type == "–î–æ–ª–≥":
        debt_amount = sum_to_pay
        due_date_obj = supplier_data.get('due_date')
        due_date = sdate(due_date_obj) if due_date_obj else ""
    else:
        paid_status = f"–î–∞ ({sum_to_pay:.2f})"
        if pay_type == "–ù–∞–ª–∏—á–Ω—ã–µ":
            try:
                comment_for_safe = f"–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: {supplier_data['name']} ({pay_type})"
                add_safe_operation("–†–∞—Å—Ö–æ–¥", sum_to_pay, comment_for_safe, who)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∏–∑ —Å–µ–π—Ñ–∞: {e}")
            
    row_to_save = [
        sdate(), supplier_data['name'], amount_income, amount_writeoff, sum_to_pay,
        invoice_total_markup, pay_type, paid_status, debt_amount, due_date, 
        supplier_data.get('comment', ''), who, ""
    ]
    
    try:
        ws_sup = GSHEET.worksheet(SHEET_SUPPLIERS)
        ws_sup.append_row(row_to_save)

        if pay_type == "–î–æ–ª–≥":
            ws_debts = GSHEET.worksheet(SHEET_DEBTS)
            ws_debts.append_row([sdate(), supplier_data['name'], sum_to_pay, 0, sum_to_pay, due_date, "–ù–µ—Ç", "–ù–∞–ª–∏—á–Ω—ã–µ"])

        add_inventory_operation("–ü—Ä–∏—Ö–æ–¥", invoice_total_markup, f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_data['name']}", who)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è
        try:
            today_str = sdate()
            supplier_name_to_check = supplier_data['name']
            if supplier_name_to_check:
                ws_plan = GSHEET.worksheet(SHEET_PLAN_FACT)
                plan_rows = get_cached_sheet_data(context, SHEET_PLAN_FACT, force_update=True)
                for i, plan_row in enumerate(plan_rows, start=2):
                    if len(plan_row) > 5 and plan_row[0] == today_str and plan_row[1] == supplier_name_to_check and plan_row[5] != "–ü—Ä–∏–±—ã–ª":
                        ws_plan.update_cell(i, 6, "–ü—Ä–∏–±—ã–ª")
                        logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞ '–ü—Ä–∏–±—ã–ª' –¥–ª—è '{supplier_name_to_check}'")
                        break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ: {e}")

        msg = (
            "‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_data['name']}\n"
            f"üì• –ü—Ä–∏—Ö–æ–¥: {amount_income:.2f}‚Ç¥\n"
            f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç/–°–ø–∏—Å–∞–Ω–∏–µ: {amount_writeoff:.2f}‚Ç¥\n"
            f"üí∏ –ö –æ–ø–ª–∞—Ç–µ: <b>{sum_to_pay:.2f}‚Ç¥</b>\n"
            f"üí∞ –í –æ—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞: {invoice_total_markup:.2f}‚Ç¥\n"
            f"üí≥ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {pay_type}\n"
        )
        if pay_type == '–î–æ–ª–≥':
            msg += f"üìÖ –°—Ä–æ–∫ –¥–æ–ª–≥–∞: {due_date}"

        kb = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", callback_data="suppliers_menu")]]
        
        if query:
            await query.message.edit_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
        else:
            await update.message.reply_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
        
        context.user_data.pop('supplier', None)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}"
        if query:
            await query.message.edit_text(error_msg)
        else:
            await update.message.reply_text(error_msg)
            
async def add_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['shift'] = {'step': 'date'}
    await query.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã (–î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=back_kb()
    )

# –ò–∑–º–µ–Ω—è–µ–º show_expenses_detail
async def show_expenses_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    report_date_str = parts[2]
    try:
        report_date = pdate(report_date_str)
    except Exception:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return

    ws_exp = GSHEET.worksheet(SHEET_EXPENSES)
    rows = ws_exp.get_all_values()[1:]
    exp_list = [row for row in rows if len(row) >= 2 and pdate(row[0].strip()) == report_date]

    if not exp_list:
        msg = "üí∏ –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        msg = f"<b>üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ {report_date_str}:</b>\n\n"
        for row in exp_list:
            amount = float(row[1].replace(',', '.'))
            comment = row[2] if len(row) > 2 else ''
            seller = row[3] if len(row) > 3 else ''
            msg += f"<b>{amount:.2f}‚Ç¥</b>"
            if comment: msg += f" ‚Äî {comment}"
            if seller: msg += f" ({seller})"
            msg += "\n"
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –í—Å–µ–≥–¥–∞ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ ---
    kb = []
    # –ï—Å–ª–∏ –º—ã –ø—Ä–∏—à–ª–∏ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (–¥–ª–∏–Ω–Ω—ã–π callback)
    if len(parts) > 5:
        start_date_str, end_date_str, index = parts[3], parts[4], parts[5]
        full_nav_context = f"{report_date_str}_{start_date_str}_{end_date_str}_{index}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º _0 –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Å –ø–µ—Ä–≤–æ–π
        kb.append([InlineKeyboardButton("üì¶ –ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ –¥–µ–Ω—å", callback_data=f"details_sup_{full_nav_context}_0")])
        kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –æ—Ç—á–µ—Ç—É", callback_data=f"detail_report_nav_{start_date_str}_{end_date_str}_{index}")])
    else: # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞ –æ —Å–¥–∞—á–µ —Å–º–µ–Ω—ã (–∫–æ—Ä–æ—Ç–∫–∏–π callback)
         kb.append([InlineKeyboardButton("üì¶ –ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ –¥–µ–Ω—å", callback_data=f"details_sup_{report_date_str}_{report_date_str}_0")])
         kb.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
    await query.message.edit_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
    
# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ show_suppliers_detail ‚Äî —á—É—Ç—å –Ω–∏–∂–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!

async def show_suppliers_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è-–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫. –û–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É `details_sup_...` 
    –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ `show_invoices_list`, –∫–æ—Ç–æ—Ä—ã–π –µ–µ –ø–æ–π–º–µ—Ç.
    """
    query = update.callback_query
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –æ–Ω —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç callback_data
    # –ú—ã –±–æ–ª—å—à–µ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –º–µ–Ω—è—Ç—å query.data, —á—Ç–æ –∏ –≤—ã–∑—ã–≤–∞–ª–æ –æ—à–∏–±–∫—É
    await show_invoices_list(update, context)
    
async def handle_shift_seller(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    seller = query.data.split('_')[2]
    
    if seller in context.user_data['shift']['selected_sellers']:
        context.user_data['shift']['selected_sellers'].remove(seller)
    else:
        context.user_data['shift']['selected_sellers'].append(seller)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    selected = context.user_data['shift']['selected_sellers']
    text = f"üë• –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã: {', '.join(selected) if selected else '–Ω–µ—Ç'}"
    
    kb = [[InlineKeyboardButton(seller, callback_data=f"shift_seller_{seller}")] for seller in SELLERS]
    kb.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="shift_done")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_shift")])
    
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(kb))

async def save_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    shift_data = context.user_data['shift']
    date = sdate(shift_data['date'])
    sellers = shift_data['selected_sellers']
    
    if len(sellers) < 1:
        await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞", show_alert=True)
        return
    
    try:
        ws = GSHEET.worksheet(SHEET_SHIFTS)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–º–µ–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        existing = None
        try:
            cell = ws.find(date)
            existing = ws.row_values(cell.row)
        except gspread.exceptions.CellNotFound:
            pass
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            ws.update_cell(cell.row, 2, sellers[0])
            if len(sellers) > 1:
                ws.update_cell(cell.row, 3, sellers[1])
            else:
                ws.update_cell(cell.row, 3, "")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            row = [date] + sellers[:2]  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–æ–¥–∞–≤—Ü–∞
            if len(sellers) < 2:
                row += [""] * (2 - len(sellers))
            ws.append_row(row)
        
        await query.message.edit_text(
            f"‚úÖ –°–º–µ–Ω–∞ –Ω–∞ {date} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
            f"üë• –ü—Ä–æ–¥–∞–≤—Ü—ã: {', '.join(sellers)}")
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        context.user_data.pop('shift', None)
        
    except Exception as e:
        await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ–Ω—ã: {str(e)}")

# --- –î–û–õ–ì–ò ---
async def show_current_debts(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ê–ö–¢–£–ê–õ–¨–ù–´–• –¥–æ–ª–≥–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–æ–º > 0."""
    query = update.callback_query
    if query:
        await query.answer()

    try:
        ws = GSHEET.worksheet(SHEET_DEBTS)
        rows = ws.get_all_values()[1:]
        
        unpaid_debts = []
        # --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ (—Å—Ç–æ–ª–±–µ—Ü E, –∏–Ω–¥–µ–∫—Å 4) –±–æ–ª—å—à–µ –Ω—É–ª—è.
        for row in rows:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                if len(row) >= 7:
                    status_paid = row[6].strip().lower()
                    balance_str = row[4].strip()
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –æ—Å—Ç–∞—Ç–∫–æ–º –Ω–µ –ø—É—Å—Ç–∞—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                    if balance_str and float(balance_str.replace(',', '.')) > 0 and status_paid != "–¥–∞":
                        unpaid_debts.append(row)
            except (IndexError, ValueError):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö
                continue

        unpaid_debts.sort(key=lambda x: pdate(x[5]) or dt.date.max)
    except Exception as e:
        await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤: {e}")
        return

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    per_page = 10
    total_records = len(unpaid_debts)
    total_pages = math.ceil(total_records / per_page) if total_records > 0 else 1
    page = max(0, min(page, total_pages - 1)) 

    start_index = page * per_page
    end_index = start_index + per_page
    page_debts = unpaid_debts[start_index:end_index]

    msg = f"<b>üìã –¢–µ–∫—É—â–∏–µ –¥–æ–ª–≥–∏ (–°—Ç—Ä. {page + 1}/{total_pages}):</b>\n"

    if not page_debts:
        msg = "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–∫—É—â–∏—Ö –¥–æ–ª–≥–æ–≤ –Ω–µ—Ç.</b>"
    else:
        for debt in page_debts:
            # –í–∞—à —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            date_created, supplier, total_amount, _, to_pay, due_date, _, pay_type = (debt + ["–ù–∞–ª–∏—á–Ω—ã–µ"])[:8]
            
            msg += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            msg += f"<b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {supplier}\n"
            msg += f"    üí∞ <b>–°—É–º–º–∞ –¥–æ–ª–≥–∞:</b> {float(to_pay.replace(',', '.')):.2f}‚Ç¥\n"
            msg += f"    üóì <b>–î–∞—Ç–∞ –¥–æ–ª–≥–∞:</b> {date_created}\n"
            msg += f"    ‚ùóÔ∏è <b>–°—Ä–æ–∫ –ø–æ–≥–∞—à–µ–Ω–∏—è:</b> {due_date}\n"
            msg += f"    üí≥ <b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> {pay_type}\n"
    
    kb = []
    kb_nav = []
    if page > 0:
        kb_nav.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"current_debts_{page - 1}"))
    if (page + 1) < total_pages:
        kb_nav.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"current_debts_{page + 1}"))
    if kb_nav:
        kb.append(kb_nav)

    kb.append([InlineKeyboardButton("‚úÖ –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥", callback_data="close_debt")])
    kb.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é –î–æ–ª–≥–∏", callback_data="debts_menu")])

    if query and query.message:
        await query.message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
    elif update.message:
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))

async def show_upcoming_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–æ–ª–≥–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à."""
    query = update.callback_query
    await query.answer()

    today = dt.date.today()
    _, end_of_week = week_range(today)
    
    # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–≠–®
    ws = GSHEET.worksheet(SHEET_DEBTS)
    rows = ws.get_all_values()[1:]
    if rows is None:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    upcoming_payments = []
    for row in rows:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±–µ—Ü G (–∏–Ω–¥–µ–∫—Å 6)
        if len(row) >= 7 and row[6].strip().lower() != "–¥–∞" and row[5]:
            due_date = pdate(row[5].strip())
            if due_date and (today <= due_date <= end_of_week):
                upcoming_payments.append(row)

    upcoming_payments.sort(key=lambda x: pdate(x[5]))
    msg = f"<b>üóìÔ∏è –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–æ {sdate(end_of_week)}</b>\n"
    if not upcoming_payments:
        msg += "\n<i>–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –¥–æ–ª–≥–∞–º –Ω–µ—Ç.</i>"
    else:
        payments_by_date = defaultdict(list)
        for payment in upcoming_payments:
            payments_by_date[payment[5]].append(payment)

        for due_date_str, payments in sorted(payments_by_date.items(), key=lambda item: pdate(item[0])):
            msg += f"\n<b><u>–°—Ä–æ–∫: {due_date_str}</u></b>\n"
            for payment in payments:
                supplier = payment[1]
                to_pay = float(payment[4].replace(',', '.'))
                msg += f"  ‚Ä¢ {supplier}: <b>{to_pay:.2f}‚Ç¥</b>\n"

    kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –î–æ–ª–≥–∏", callback_data="debts_menu")]]
    await query.message.edit_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))

# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ù–ï–î–û–°–¢–ê–Æ–©–£–Æ –§–£–ù–ö–¶–ò–Æ ---
async def repay_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, row_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ò–ù–î–ï–ö–° –°–¢–†–û–ö–ò."""
    query = update.callback_query
    await query.answer()
    
    try:
        ws = GSHEET.worksheet(SHEET_DEBTS)
        debt_row = ws.row_values(row_index)
        
        # –ò–Ω–¥–µ–∫—Å—ã –ø–æ –≤–∞—à–µ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç—É: B(1) - –ü–æ—Å—Ç–∞–≤—â–∏–∫, E(4) - –û—Å—Ç–∞—Ç–æ–∫, F(5) - –°—Ä–æ–∫
        supplier = debt_row[1]
        to_pay = float(debt_row[4].replace(',', '.'))
        due_date = debt_row[5]

        text = (
            f"‚ùóÔ∏è<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º?\n\n"
            f"<b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {supplier}\n"
            f"<b>–°—É–º–º–∞ –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é:</b> {to_pay:.2f}‚Ç¥\n"
            f"<b>–°—Ä–æ–∫:</b> {due_date}\n"
        )
        
        kb = [[
            InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–≥–∞—Å–∏—Ç—å", callback_data=f"repay_final_{row_index}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_debt")
        ]]
        await query.message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ repay_confirm –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_index}: {e}")
        await query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–ª–≥–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debts_menu")]]))

async def view_repayable_debts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à."""
    query = update.callback_query
    await query.answer()

    # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–≠–®
    ws = GSHEET.worksheet(SHEET_DEBTS)
    rows = ws.get_all_values()[1:]
    if rows is None:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±–µ—Ü G (–∏–Ω–¥–µ–∫—Å 6) –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
    unpaid_debts = [row + [i+2] for i, row in enumerate(rows) if len(row) >= 7 and row[6].strip().lower() != "–¥–∞"]
    unpaid_debts.sort(key=lambda x: pdate(x[5]) or dt.date.max)

    if not unpaid_debts:
        await query.message.edit_text("‚úÖ –í—Å–µ –¥–æ–ª–≥–∏ –ø–æ–≥–∞—à–µ–Ω—ã!", reply_markup=debts_menu_kb())
        return

    msg = "<b>üí∏ –ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–∞—Å–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é:"
    kb = []
    for debt in unpaid_debts:
        row_index = debt[-1]
        date_str = debt[0] if len(debt) > 0 else ""
        supplier = debt[1] if len(debt) > 1 else ""
        total_str = debt[2] if len(debt) > 2 else "0"
        due_date_str = debt[5] if len(debt) > 5 else ""
        total_amount = float(total_str.replace(',', '.'))
        btn_text = f"{date_str} - {supplier} - {total_amount:.2f}‚Ç¥"
        kb.append([InlineKeyboardButton(btn_text, callback_data=f"repay_confirm_{row_index}")])
    
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debts_menu")])
    await query.message.edit_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))


# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú ---
async def repay_final(update: Update, context: ContextTypes.DEFAULT_TYPE, row_index: int):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ª–≥, –æ–±–Ω–æ–≤–ª—è—è –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–î–æ–ª–≥–∏, –°–µ–π—Ñ, –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏)."""
    query = update.callback_query
    
    try:
        ws_debts = GSHEET.worksheet(SHEET_DEBTS)
        debt_row = ws_debts.row_values(row_index)
        
        date_created = debt_row[0]
        supplier_name = debt_row[1]
        total = float(debt_row[2].replace(',', '.'))
        
        # 1. –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–ª–≥ –≤ –ª–∏—Å—Ç–µ "–î–æ–ª–≥–∏"
        ws_debts.update_cell(row_index, 4, total)      # –û–ø–ª–∞—á–µ–Ω–æ
        ws_debts.update_cell(row_index, 5, 0)          # –û—Å—Ç–∞—Ç–æ–∫
        ws_debts.update_cell(row_index, 7, "–î–∞")       # –ü–æ–≥–∞—à–µ–Ω–æ
        
        # 2. –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É —Å —Å–µ–π—Ñ–∞
        who = query.from_user.first_name
        comment = f"–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ {supplier_name} –∑–∞ {date_created}"
        add_safe_operation("–†–∞—Å—Ö–æ–¥", total, comment, who)
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–∏—Å—Ç–µ "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
        ws_sup = GSHEET.worksheet(SHEET_SUPPLIERS)
        sup_rows = ws_sup.get_all_values()[1:]
        for i, sup_row in enumerate(sup_rows, start=2):
            # –ò—â–µ–º –Ω–∞–∫–ª–∞–¥–Ω—É—é –ø–æ –¥–∞—Ç–µ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
            if len(sup_row) > 8 and sup_row[0] == date_created and sup_row[1] == supplier_name:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã: –û–ø–ª–∞—á–µ–Ω–æ(H,8), –î–æ–ª–≥(I,9), –°—Ä–æ–∫(J,10), –ò—Å—Ç–æ—Ä–∏—è(M,13)
                ws_sup.update_cell(i, 8, "–î–∞")
                ws_sup.update_cell(i, 9, 0)
                ws_sup.update_cell(i, 10, "") # –û—á–∏—â–∞–µ–º —Å—Ä–æ–∫ –¥–æ–ª–≥–∞
                history_comment = f"–ü–æ–≥–∞—à–µ–Ω {sdate()}; "
                old_history = ws_sup.cell(i, 13).value or ""
                ws_sup.update_cell(i, 13, old_history + history_comment)
                logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–æ–ª–≥–∞ –≤ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞—Ö –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {i}")
                break

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        if 'sheets_cache' in context.bot_data:
            context.bot_data['sheets_cache'].pop(SHEET_DEBTS, None)
            context.bot_data['sheets_cache'].pop(SHEET_SUPPLIERS, None)
            context.bot_data['sheets_cache'].pop("–°–µ–π—Ñ", None)
        
        await query.answer(f"‚úÖ –î–æ–ª–≥ –¥–ª—è {supplier_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤
        await view_repayable_debts(update, context)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}", show_alert=True)
        
async def view_debts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ù–ï–ü–û–ì–ê–®–ï–ù–ù–´–• –¥–æ–ª–≥–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–ª—è –Ω–∏—Ö –∫–Ω–æ–ø–∫–∏
    —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º (–Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–æ–∫–∏ –≤ Google –¢–∞–±–ª–∏—Ü–µ).
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –≤—ã–∑–æ–≤ (–æ—Ç –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞)
    if hasattr(update, "callback_query") and update.callback_query:
        query = update.callback_query
        await query.answer()
        msg_func = query.message.edit_text
    else:
        msg_func = update.message.reply_text

    try:
        ws = GSHEET.worksheet(SHEET_DEBTS)
        rows = ws.get_all_values()[1:]
    except Exception as e:
        await msg_func(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤: {e}")
        return

    # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏ (—Å—Ç–æ–ª–±–µ—Ü G, –∏–Ω–¥–µ–∫—Å 6) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (i+2)
    unpaid_debts = [row + [i+2] for i, row in enumerate(rows) if len(row) > 6 and row[6].strip().lower() != "–¥–∞"]
    unpaid_debts.sort(key=lambda x: pdate(x[5]) or dt.date.max) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–æ–∫—É –ø–æ–≥–∞—à–µ–Ω–∏—è
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã (–≤–∞–∂–Ω–æ –¥–ª—è repay_confirm)
    context.user_data['repay_debts'] = unpaid_debts

    if not unpaid_debts:
        await msg_func("üü¢ –û—Ç–ª–∏—á–Ω–æ! –ù–µ—Ç –¥–æ–ª–≥–æ–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è.", reply_markup=debts_menu_kb())
        return

    text = "<b>üí∏ –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:\n"
    kb = []
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º enumerate –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–æ callback –¥–µ–ª–∞–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º —Å—Ç—Ä–æ–∫–∏
    for i, debt_data in enumerate(unpaid_debts):
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        date, supplier, total_str, _, _, due, _, row_index = (debt_data + [sdate(), 0])[:8]
        
        text += (f"\n<b>{i+1}. {supplier}</b>\n"
                 f"   - –î–∞—Ç–∞: {date}, –°—Ä–æ–∫: {due}\n"
                 f"   - –°—É–º–º–∞: <b>{float(total_str.replace(',','.')):.2f}‚Ç¥</b>\n")
        
        # --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º i
        kb.append([InlineKeyboardButton(f"‚úÖ –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥ ‚Ññ{i+1} –¥–ª—è {supplier}", callback_data=f"repay_confirm_{row_index}")])
        
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –¥–æ–ª–≥–æ–≤", callback_data="debts_menu")])

    await msg_func(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ï–ô–§–û–í, –ü–ï–†–ï–£–ß–ï–¢–û–í –ò –ó–ü ---

async def inventory_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    push_nav(context, "inventory_balance")  # <--- –¥–æ–±–∞–≤—å!
    bal = get_inventory_balance()
    await update.callback_query.message.edit_text(
        f"üì¶ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞: <b>{bal:.2f}‚Ç¥</b>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stock_safe_menu")]])
    )

async def safe_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    rows = get_cached_sheet_data(context, "–°–µ–π—Ñ")
    if rows is None:
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–π—Ñ–∞.")
        return

    last_ops = rows[-15:]
    last_ops.reverse()
    
    text = "üßæ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ–π—Ñ–æ–º:</b>\n"
    if not last_ops:
        text += "\n<i>–û–ø–µ—Ä–∞—Ü–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ.</i>"
    else:
        for row in last_ops:
            date, op_type, amount, comment, user = (row + ["", "", "", "", ""])[:5]
            icon = "üü¢" if op_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" else "üî¥"
            text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            text += f"{icon} <b>{op_type}: {amount}‚Ç¥</b> ({user})\n"
            text += f"   <i>{date} - {comment}</i>"
        
    await query.message.edit_text(text, parse_mode='HTML', reply_markup=stock_safe_kb())



# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–í–ï –§–£–ù–ö–¶–ò–ò ---

async def start_safe_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    context.user_data['safe_op'] = {'type': 'deposit', 'step': 'amount'}
    await query.message.edit_text(
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–π—Ñ–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stock_safe_menu")]])
    )

async def start_safe_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–Ω—è—Ç–∏—è
    context.user_data['safe_op'] = {'type': 'withdraw', 'step': 'amount'}
    await query.message.edit_text(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è –∏–∑ —Å–µ–π—Ñ–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stock_safe_menu")]])
    )
    
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
# --- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ---
async def handle_safe_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ–π—Ñ–æ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à."""
    try:
        amount = float(update.message.text.replace(',', '.'))
        user = update.effective_user
        op_data = context.user_data.get('safe_op', {})
        op_type = op_data.get('type')

        if not op_type:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            context.user_data.pop('safe_op', None)
            return

        # 1. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        if op_type == 'deposit':
            add_safe_operation("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", amount, "–í–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö", user.first_name)
        elif op_type == 'withdraw':
            add_safe_operation("–°–Ω—è—Ç–∏–µ", amount, "–°–Ω—è—Ç–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", user.first_name)

        # 2. –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è –ª–∏—Å—Ç–∞ "–°–µ–π—Ñ"
        if 'sheets_cache' in context.bot_data and "–°–µ–π—Ñ" in context.bot_data['sheets_cache']:
            del context.bot_data['sheets_cache']["–°–µ–π—Ñ"]
            logging.info("–ö—ç—à –¥–ª—è –ª–∏—Å—Ç–∞ '–°–µ–π—Ñ' —Å–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.")

        # 3. –ü–æ–ª—É—á–∞–µ–º —É–∂–µ 100% –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        bal = get_safe_balance(context)
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        msg = f"‚úÖ –°–µ–π—Ñ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f}‚Ç¥" if op_type == 'deposit' else f"‚úÖ –°–Ω—è—Ç–æ –∏–∑ —Å–µ–π—Ñ–∞: {amount:.2f}‚Ç¥"
        msg += f"\n\n–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: <b>{bal:.2f}‚Ç¥</b>"
        kb = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(kb))
        context.user_data.pop('safe_op', None)

    except (ValueError, KeyError):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
# --- –ì–†–ê–§–ò–ö–ò –ò –≠–ö–°–ü–û–†–¢ ---
async def generate_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, chart_type, start_str, end_str = query.data.split('_')
    start_date = pdate(start_str)
    end_date = pdate(end_str)
    
    try:
        ws = GSHEET.worksheet(SHEET_REPORT)
        rows = ws.get_all_values()[1:]
        
        dates = []
        sales = []
        dates_set = set()
        
        current = start_date
        while current <= end_date:
            dates.append(sdate(current))
            sales.append(0)
            current += dt.timedelta(days=1)
        
        for row in rows:
            if len(row) < 5:
                continue
            try:
                row_date = pdate(row[0])
                if row_date is None:
                    continue  # –¥–æ–±–∞–≤–∏–ª —ç—Ç—É —Å—Ç—Ä–æ–∫—É!
                if start_date <= row_date <= end_date:
                    pass
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
                continue
        
        plt.figure(figsize=(10, 6))
        plt.plot(dates, sales, marker='o', linestyle='-')
        plt.title(f"–ü—Ä–æ–¥–∞–∂–∏ —Å {sdate(start_date)} –ø–æ {sdate(end_date)}")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–°—É–º–º–∞ (‚Ç¥)")
        plt.xticks(rotation=45)
        plt.grid(True)
        plt.tight_layout()
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()
        
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=InputFile(buf),
            caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥"
        )
        
    except Exception as e:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è Excel-—Ñ–∞–π–ª
    await query.message.reply_text(
        "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–ê ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ text.lower() –∑–¥–µ—Å—å –±—ã–ª–∞ —É–±—Ä–∞–Ω–∞, —Ç.–∫. –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —à–∞–≥–∞—Ö –Ω—É–∂–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
    text = update.message.text.strip() 
    
    if text.lower() == "/cancel":
        return await cancel(update, context)

    user_data = context.user_data
    state_key = next((key for key in [
        'revision', 'report', 'supplier', 'planning', 'edit_plan', 'edit_invoice', 
        'search_debt', 'safe_op', 'inventory_expense', 'repay', 'shift', 'report_period'
    ] if key in user_data), None)

    # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º
    if not state_key:
        return await update.message.reply_text(
            "‚ÑπÔ∏è –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=main_kb(str(update.effective_user.id) in ADMINS)
        )

    # --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é ---
    
    if state_key == 'report':
        step = user_data['report'].get('step')
        if step == 'cash': return await handle_report_cash(update, context)
        elif step == 'terminal': return await handle_report_terminal(update, context)
        elif step == 'expenses': return await handle_report_expenses(update, context)
        elif step == 'expense_comment': return await handle_expense_comment(update, context)
        elif step == 'comment': return await save_report(update, context)

    elif state_key == 'supplier':
        step = user_data['supplier'].get('step')
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ---
        if step == 'name': return await handle_supplier_name(update, context)
        elif step == 'amount_income': return await handle_supplier_amount_income(update, context)
        elif step == 'writeoff': return await handle_supplier_writeoff(update, context)
        elif step == 'invoice_total_markup': return await handle_supplier_invoice_total_markup(update, context)
        elif step == 'due_date': return await handle_supplier_due_date(update, context)
        elif step == 'comment': return await save_supplier(update, context)

    elif state_key == 'expense':
        step = user_data['expense'].get('step')
        if step == 'value': return await handle_expense_value(update, context)
        elif step == 'comment': return await save_expense(update, context)

    elif state_key == 'revision':
        step = user_data['revision'].get('step')
        if step == 'actual_amount': return await handle_revision_amount(update, context)
        elif step == 'comment': return await save_revision(update, context)

    elif state_key == 'edit_invoice':
        # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è
        edit_state = user_data['edit_invoice']
        step = edit_state.get('step', '')
        field_key = step.replace('editing_', '')
        
        fields_to_edit = edit_state.get('fields_to_edit_list', [])
        current_index = edit_state.get('current_field_index', 0)
        
        if fields_to_edit and current_index < len(fields_to_edit) and fields_to_edit[current_index] == field_key:
            edit_state.setdefault('new_values', {})[field_key] = update.message.text
            edit_state['current_field_index'] += 1
            await ask_for_invoice_edit_value(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞.")
        return

    elif state_key == 'planning':
        step = user_data['planning'].get('step')
        if step == 'amount': return await handle_planning_amount(update, context)
        elif step == 'other_supplier_name':
            supplier_name = update.message.text
            target_date_str = user_data['planning']['date']
            user_data['planning'].update({'supplier': supplier_name, 'step': 'amount'})
            await update.message.reply_text(
                f"üí∞ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É –¥–ª—è <b>{supplier_name}</b> –Ω–∞ {target_date_str} (–≤ –≥—Ä–∏–≤–Ω–∞—Ö):",
                parse_mode=ParseMode.HTML
            )
            return

    elif state_key == 'edit_plan':
        if user_data['edit_plan'].get('field') == 'amount':
            try:
                await edit_plan_save_value(update, context, new_value=parse_float(text))
            except ValueError:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    elif state_key == 'search_debt':
        # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞—à–µ–π, —è –µ–µ –Ω–µ —Ç—Ä–æ–≥–∞–ª
        search_query = text.strip()
        context.user_data.pop('search_debt', None)
        rows = get_cached_sheet_data(context, SHEET_DEBTS)
        if rows is None:
             await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤.")
             return
        matches = []
        for i, row in enumerate(rows):
            if len(row) < 7: continue
            date_str, name_str, amount_str = row[0].strip(), row[1].strip().lower(), row[2].replace(',', '.')
            if (search_query == date_str or search_query.lower() in name_str or (search_query.replace(',', '.').isdigit() and search_query == amount_str)):
                matches.append(row + [i+2])
        if not matches:
            await update.message.reply_text("üö´ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debts_menu")]]))
        else:
            msg = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{search_query}':</b>\n"
            kb = []
            for debt in matches:
                supplier, total, to_pay, due_date, status, row_index = debt[1], parse_float(debt[2]), parse_float(debt[4]), debt[5], debt[6], debt[-1]
                status_icon = "‚úÖ" if status.lower() == '–¥–∞' else "‚ùå"
                msg += f"\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n{status_icon} <b>{supplier}</b>\n  <b>–°—É–º–º–∞:</b> {total:.2f}‚Ç¥ | <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {to_pay:.2f}‚Ç¥\n  <b>–°—Ä–æ–∫:</b> {due_date}"
                if status.lower() != '–¥–∞':
                    kb.append([InlineKeyboardButton(f"‚úÖ –ü–æ–≥–∞—Å–∏—Ç—å –¥–ª—è {supplier} ({to_pay:.2f}‚Ç¥)", callback_data=f"repay_confirm_{row_index}")])
            kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debts_menu")])
            await update.message.reply_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
        return

    elif state_key == 'safe_op':
        if user_data['safe_op'].get('step') == 'amount': return await handle_safe_amount(update, context)

    elif state_key == 'inventory_expense':
        step = user_data['inventory_expense'].get('step')
        if step == 'amount': return await handle_inventory_expense(update, context)
        elif step == 'comment': return await save_inventory_expense(update, context)

    elif state_key == 'repay':
        if user_data['repay'].get('step') == 'amount': return await repay_debt(update, context)

    elif state_key == 'shift':
        if user_data['shift'].get('step') == 'date': await handle_shift_date(update, context)

    elif state_key == 'report_period':
        step = user_data['report_period'].get('step')
        if step == 'start_date': return await handle_report_start_date(update, context)
        elif step == 'end_date': return await handle_report_end_date(update, context)
            
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    try:
        # --- 1. –û–°–ù–û–í–ù–´–ï –ú–ï–ù–Æ ---
        if data == "main_menu": await main_menu(update, context)
        elif data == "close": await close_menu(update, context)
        elif data == "finance_menu": await finance_menu(update, context)
        elif data == "suppliers_menu": await suppliers_menu(update, context)
        elif data == "debts_menu": await debts_menu(update, context)
        elif data == "admin_panel": await admin_panel(update, context)
        elif data == "staff_management": await staff_management_menu(update, context)
        elif data == "stock_safe_menu": await stock_safe_menu(update, context)
        elif data == "staff_menu": await staff_menu(update, context)
        
        # --- 2. –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ---
        elif data == "planning": await start_planning(update, context)
        elif data.startswith("plan_nav_"):
            target_date = pdate(data.split('_')[-1])
            await start_planning(update, context, target_date=target_date)
        elif data.startswith("plan_delete_"):
            _, _, row_index_str, date_str = data.split('_')
            if delete_plan_by_row_index(int(row_index_str)):
                await query.answer("–ü–ª–∞–Ω —É–¥–∞–ª–µ–Ω!")
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ –∂–µ –¥–Ω—è
            await start_planning(update, context, target_date=pdate(date_str))
        
        elif data.startswith("plan_sup_"): await handle_planning_supplier_choice(update, context)
        elif data.startswith("plan_pay_"): await handle_planning_pay_type(update, context)
        
        # --- 3. –ñ–£–†–ù–ê–õ –ü–†–ò–ë–´–¢–ò–Ø –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–õ–ê–ù–û–í ---
        elif data == "view_suppliers": await show_arrivals_journal(update, context)
        elif data.startswith("toggle_arrival_"): await toggle_arrival_status(update, context)
        elif data.startswith("edit_plan_field_"): await edit_plan_choose_field(update, context)
        elif data.startswith("edit_plan_value_"): await edit_plan_save_value(update, context)
        elif data.startswith("journal_nav_"):
            target_date = pdate(data.split('_')[-1])
            await show_arrivals_journal(update, context, target_date=target_date)
        elif data.startswith("edit_plan_"): await edit_plan_start(update, context)

        # --- 4. –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–ö–õ–ê–î–ù–û–ô (–ù–û–í–û–ï) ---
        elif data.startswith("edit_invoice_start_"):
            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            row_index = int(data.split('_')[-1])
            
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è ---
            context.user_data['edit_invoice'] = {
                'row_index': row_index,
                'selected_fields': {}, # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                'new_values': {}       # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            }
            
            all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
            if row_index - 2 < len(all_invoices):
                invoice_data = all_invoices[row_index - 2]
                kb = build_edit_invoice_keyboard(invoice_data, {}, row_index)
                await query.message.edit_text("<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–ª–æ—á–∫–∞–º–∏ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'.",
                                              parse_mode=ParseMode.HTML, reply_markup=kb)
            else:
                await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")


        elif data.startswith("edit_invoice_toggle_"):
            parts = data.split('_')
            row_index = int(parts[3])
            field = "_".join(parts[4:])
            
            edit_state = context.user_data.get('edit_invoice', {})
            if edit_state.get('row_index') != row_index: return

            if field in edit_state['selected_fields']:
                del edit_state['selected_fields'][field]
            else:
                edit_state['selected_fields'][field] = None
            
            all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)
            invoice_data = all_invoices[row_index - 2]
            kb = build_edit_invoice_keyboard(invoice_data, edit_state['selected_fields'], row_index)
            await query.message.edit_text("<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–ª–æ—á–∫–∞–º–∏ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'.",
                                          parse_mode=ParseMode.HTML, reply_markup=kb)

        elif data.startswith("edit_invoice_save_"):
             await ask_for_invoice_edit_value(update, context)

        elif data.startswith("edit_invoice_cancel_"):
            row_index = int(data.split('_')[-1])
            day_invoice_rows = context.user_data.get('day_invoice_rows', [])
            try:
                list_index = day_invoice_rows.index(row_index)
                all_invoices = get_cached_sheet_data(context, SHEET_SUPPLIERS)
                date_str = sdate(pdate(all_invoices[row_index-2][0]))
                query.data = f"view_single_invoice_{date_str}_{list_index}"
                await show_single_invoice(update, context)
            except (ValueError, IndexError):
                await suppliers_menu(update, context)
            context.user_data.pop('edit_invoice', None)
            
        elif data.startswith("invoice_edit_value_"):
            value = data.replace("invoice_edit_value_", "")
            edit_state = context.user_data.get('edit_invoice', {})
            fields_to_edit = edit_state.get('fields_to_edit_list', [])
            current_index = edit_state.get('current_field_index', 0)
            if fields_to_edit and current_index < len(fields_to_edit):
                current_field_key = fields_to_edit[current_index]
                edit_state['new_values'][current_field_key] = value
                edit_state['current_field_index'] += 1
                if current_field_key == 'pay_type' and value == '–î–æ–ª–≥' and 'due_date' not in fields_to_edit:
                    fields_to_edit.append('due_date')
            await ask_for_invoice_edit_value(update, context)
            
        elif data.startswith("execute_invoice_edit_"):
            await execute_invoice_edit(update, context)

        # --- 5. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ê–ö–õ–ê–î–ù–û–ô ---
        elif data == "add_supplier": await start_supplier(update, context)
        elif data.startswith("add_sup_"): await handle_add_supplier_choice(update, context)
        elif data.startswith("pay_"): await handle_supplier_pay_type(update, context)
        elif data == "skip_comment_supplier": await save_supplier(update, context)

        # --- 6. –°–î–ê–ß–ê –°–ú–ï–ù–´ ---
        elif data == "add_report": await start_report(update, context)
        elif data.startswith("report_seller_"):  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–¥–∞—á–∏ —Å–º–µ–Ω—ã
            await handle_report_seller(update, context)
        elif data in ("exp_yes", "exp_no"): await handle_report_expenses_ask(update, context)
        elif data in ("more_yes", "more_no"): await handle_expense_more(update, context)
        elif data == "skip_comment": await save_report(update, context)
        
        # --- 7. –ü–†–û–°–ú–û–¢–† –û–¢–ß–ï–¢–û–í ---
        elif data == "view_reports_menu": await view_reports_menu(update, context)
        elif data == "report_today": await get_report_today(update, context)
        elif data == "report_yesterday": await get_report_yesterday(update, context)
        elif data.startswith("report_week_"):
            if data == "report_week_current": await get_report_week(update, context)
            else: _, _, start_str, end_str = data.split('_', 3); await show_report(update, context, pdate(start_str), pdate(end_str))
        elif data.startswith("report_month_"):
            if data == "report_month_current": await get_report_month(update, context)
            else: _, _, start_str, end_str = data.split('_', 3); await show_report(update, context, pdate(start_str), pdate(end_str))
        elif data == "report_custom": 
            await get_report_custom(update, context)
        elif data == "daily_summary": await show_daily_dashboard(update, context)
        
        # --- 8. –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í ---
        elif data == "view_today_invoices": await show_today_invoices(update, context)
        elif data.startswith("choose_date_"): await choose_details_date(update, context)
        elif data.startswith("details_exp_"): await show_expenses_detail(update, context)
        elif data.startswith("details_sup_"): await show_suppliers_detail(update, context)
        elif data.startswith("detail_report_nav_"): await show_detailed_report(update, context)
        elif data.startswith("invoices_list_"): await show_invoices_list(update, context)
        elif data.startswith("view_single_invoice_"): await show_single_invoice(update, context)
        
        # --- 9. –î–û–õ–ì–ò ---
        elif data.startswith("current_debts_"):
            await show_current_debts(update, context, page=int(data.split('_')[-1]))
        elif data == "upcoming_payments": await show_upcoming_payments(update, context)
        elif data == "close_debt": await view_repayable_debts(update, context)
        elif data == "search_debts": await search_debts_start(update, context)
        elif data.startswith("repay_confirm_"):
            await repay_confirm(update, context, int(data.split('_')[2]))
        elif data.startswith("repay_final_"):
            await repay_final(update, context, int(data.split('_')[2]))
        elif data.startswith("debts_history_"):
            page = 0
            if data == "debts_history_prev":
                page = max(context.user_data.get('debts_history_page', 0) - 1, 0)
            elif data == "debts_history_next":
                page = context.user_data.get('debts_history_page', 0) + 1
            else: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä 'debts_history_0'
                try:
                    page = int(data.split('_')[-1])
                except (ValueError, IndexError):
                    page = 0
            
            context.user_data['debts_history_page'] = page
            await view_debts_history(update, context, page=page)
            
        # --- 10. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–û–ú (–ê–î–ú–ò–ù) ---
        elif data.startswith("view_salary_"): await show_seller_salary_details(update, context)
        elif data.startswith("confirm_payout_"): await confirm_payout(update, context)
        elif data.startswith("execute_payout_"): await execute_payout(update, context)
        elif data.startswith("salary_history_"): await show_salary_history(update, context)
        elif data == "view_shifts":
            await view_shifts_calendar(update, context)
        elif data == "edit_shifts":
            await edit_shifts_calendar(update, context)
        elif data.startswith("shift_nav_"):
            _, _, year, month = data.split('_')
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –º—ã –±—ã–ª–∏
        # –ú—ã –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ user_data –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–µ—à–∏—Ç—å –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—É—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤–µ–¥–µ—Ç –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω –∞–¥–º–∏–Ω
            if str(query.from_user.id) in ADMINS:
                await edit_shifts_calendar(update, context, int(year), int(month))
            else:
                await view_shifts_calendar(update, context, int(year), int(month))
        elif data.startswith("edit_shift_"):
            await edit_single_shift(update, context)
        elif data.startswith("toggle_seller_"):
            await toggle_seller_for_shift(update, context)
        elif data == "save_shift":
            await save_shift_changes(update, context)
        elif data.startswith("view_shift_"):
            await show_shift_details(update, context)
        elif data == "seller_stats":
            await show_seller_stats_menu(update, context)
        elif data.startswith("view_seller_stats_"):
            await show_seller_stats(update, context)
        elif data == "compare_sellers": await show_sellers_comparison(update, context)
    
        # --- 11. –°–ï–ô–§ –ò –û–°–¢–ê–¢–û–ö ---
        elif data == "inventory_balance": await inventory_balance(update, context)
        elif data == "safe_balance": await safe_balance(update, context)
        elif data == "safe_history": await safe_history(update, context)
        elif data == "inventory_history": await inventory_history(update, context)
        elif data == "safe_deposit": await start_safe_deposit(update, context)
        elif data == "safe_withdraw": await start_safe_withdraw(update, context)
        elif data == "add_inventory_expense": await start_inventory_expense(update, context)
        elif data == "admin_revision": await start_revision(update, context)

        # --- 12. –ü–†–û–ß–ï–ï ---
        elif data == "noop": pass
        else:
            await query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {data}. –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        



async def error_handler(update, context):
    import traceback
    tb = traceback.format_exc()
    logging.error(f"Exception: {tb}")
    if update and hasattr(update, "effective_chat") and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n<pre>{tb}</pre>",
            parse_mode="HTML"
        )


# --- –ó–ê–ü–£–°–ö ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(cancel_report, pattern="^cancel_report$"))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_error_handler(error_handler)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
    
if __name__ == "__main__":
    main()
